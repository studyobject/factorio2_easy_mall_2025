--#region ‚ñº
--#endregion ‚ñ≤

-- script_basic_brain.lua

--#region ‚ñº –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

--#region ‚ñº‚ñº ‚òÜ –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

--- –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π.
--- @param name string --[[ –ò–º—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ (—Å–∏–≥–Ω–∞–ª–∞, –∂–∏–¥–∫–æ—Å—Ç–∏, –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞). ]]
--- @param expected_type? string --[[ –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "recipe", —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç—ã. ]]
--- @return "recipe"|"virtual"|"fluid"|"item"|nil --[[ –¢–∏–ø –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –∏–ª–∏ nil, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ]]
local function get_type(name, expected_type)
  if expected_type == "recipe" then
    if prototypes.recipe[name] then
      return "recipe"
    end
  end

  if prototypes.virtual_signal[name] then
    return "virtual"
  end

  if prototypes.fluid[name] then
    return "fluid"
  end

  if prototypes.item[name] then
    return "item"
  end

  game.print("–í–Ω–∏–º–∞–Ω–∏–µ, –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: " .. tostring(name))
  return nil
end

--- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è decider combinator
--- @param params table --[[ –í—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—è–º–∏: name (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), type (–æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø), quality (–∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞) ]]
--- @param fluid_quality boolean? --[[ –ï—Å–ª–∏ false, —Ç–æ –¥–ª—è fluid-—Å–∏–≥–Ω–∞–ª–æ–≤ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ]]
--- @return table --[[ –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ params, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–æ–ª—è–º–∏ type –∏ quality ]]
local function sdp_signal_dc(params, fluid_quality)
  if not params.name then
    error("sdp_signal: –ø–∞—Ä–∞–º–µ—Ç—Ä 'name' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω")
  end

  fluid_quality = fluid_quality == nil and true or fluid_quality

  params.type = get_type(params.name, params.type)

  if params.type == "fluid" and not fluid_quality then
    params.quality = qualities[1]
  else
    params.quality = params.quality or qualities[1]
  end

  return params
end

--- –ò—â–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ area —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ –º–µ—Ç–∫–∏.
--- @param label string --[[ –ú–µ—Ç–∫–∞: –∏—â–µ—Ç—Å—è –≤ combinator_description –∏ group —Å–µ–∫—Ü–∏–π ]]
--- @param search_params table --[[ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è surface.find_entities_filtered (–º–æ–∂–Ω–æ –±–µ–∑ area) ]]
--- @return LuaEntity[] --[[ –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º) ]]
local function findSpecialEntity(label, search_params)
  local surface = game.player.surface
  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é area, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  if area and not search_params.area then
    search_params.area = area
  end

  local entities = surface.find_entities_filtered(search_params)
  label = string.lower(label)

  local found_entities = {}

  for _, entity in ipairs(entities) do
    -- üìå 1. combinator_description (–µ—Å–ª–∏ –µ—Å—Ç—å)
    local success, desc = pcall(function()
      return entity.combinator_description
    end)
    if success and desc and string.lower(desc):find(label, 1, true) then
      table.insert(found_entities, entity)
    end

    -- üìå 2. get_logistic_sections —Å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–µ–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π group
    if entity.get_logistic_sections then
      local sections = entity.get_logistic_sections()
      if sections and sections.sections then
        for _, section in pairs(sections.sections) do
          if not section.active and section.group and type(section.group) == "string" then
            if string.lower(section.group) == label then
              table.insert(found_entities, entity)
            end
          end
        end
      end
    end
  end

  return found_entities
end

-- –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ (items/fluids) –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
-- –≤—ã—á–∏—Å–ª—è–µ—Ç ¬´–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ¬ª (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ–º–æ–µ –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ –∫—Ä–∞—Ñ—Ç–∞):
--   1) exclusively_ingredients: –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–Ω–∏ —Ä–∞–∑—É –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–º);
--   2) ingredients_and_products: –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –∫–∞–∫ –ø—Ä–æ–¥—É–∫—Ç;
--   3) exclusively_products: –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∏ —Ä–∞–∑—É –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç).
-- –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã ¬´exclusively_products¬ª –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è¬ª –±—É–¥–µ—Ç 0, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç—Å—è.
--
-- @param recipes table –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
--                     {
--                       ["iron-plate"]    = <–ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞ iron-plate LuaPrototype>,
--                       ["copper-cable"]  = <–ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞ copper-cable LuaPrototype>,
--                       ‚Ä¶
--                     }
--                     –ì–¥–µ –∫–∞–∂–¥—ã–π <–ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞> ‚Äî —ç—Ç–æ LuaPrototype —Å –ø–æ–ª–µ–º .ingredients
--                     (—Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü { name=string, type="item"/"fluid", amount=number }) –∏
--                     –ø–æ–ª–µ–º .products / .results / .result.
-- @return table –¢–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—è–º–∏:
--               exclusively_ingredients   = { [–∏–º—è_–æ–±—ä–µ–∫—Ç–∞] = <–º–∞–∫—Å. –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ>, ‚Ä¶ },
--               ingredients_and_products  = { [–∏–º—è_–æ–±—ä–µ–∫—Ç–∞] = <–º–∞–∫—Å. –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ>, ‚Ä¶ },
--               exclusively_products      = { [–∏–º—è_–æ–±—ä–µ–∫—Ç–∞] = 0, ‚Ä¶ }
local function get_classify_ingredients(recipes)
  -- –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ –ø–æ–¥—Ç–∞–±–ª–∏—Ü—ã
  local ingredient_groups  = {
    exclusively_ingredients  = {}, -- –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ ingredients
    ingredients_and_products = {}, -- –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏ —Ç–∞–º, –∏ —Ç–∞–º
    exclusively_products     = {}, -- –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ products
  }

  -- –®–∞–≥ 0: –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  -- max_consumption[name] = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —Ç—Ä–µ–±—É–µ–º–æ–µ –≤ –æ–¥–Ω–æ–º —Ä–µ–º–µ—Å–ª–µ (–∏–∑ –ø–æ–ª—è .ingredients)
  local max_consumption    = {}

  -- seen_as_ingredient[name] = true, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ ingredients
  local seen_as_ingredient = {}
  -- seen_as_product[name] = true, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ products
  local seen_as_product    = {}

  -- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø item/fluid, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
  -- –ó–¥–µ—Å—å –Ω–∞–º –≤–∞–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
  local function get_object_prototype(name, maybe_type)
    if maybe_type == "fluid" then
      return prototypes.fluid[name]
    end
    if prototypes.item[name] then
      return prototypes.item[name]
    elseif prototypes.fluid[name] then
      return prototypes.fluid[name]
    else
      return nil
    end
  end

  -- –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
  for _, recipe_proto in pairs(recipes) do
    -- 1.1 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ingredients
    if recipe_proto.ingredients then
      for _, ing in ipairs(recipe_proto.ingredients) do
        local obj_name = ing.name
        local obj_type = ing.type -- –º–æ–∂–µ—Ç –±—ã—Ç—å "item" –∏–ª–∏ "fluid"
        local amount = ing.amount or 0
        -- –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
        if not max_consumption[obj_name] or amount > max_consumption[obj_name] then
          max_consumption[obj_name] = amount
        end
        -- –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        seen_as_ingredient[obj_name] = true
      end
    end

    -- 1.2 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º products / results / result
    if recipe_proto.products then
      for _, prod in ipairs(recipe_proto.products) do
        local obj_name = prod.name
        seen_as_product[obj_name] = true
        -- –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ max_consumption,
        -- —Ç.–∫. —ç—Ç–æ –º–µ—Ç—Ä–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
        -- –ù–æ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∏—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º,
        -- –µ–≥–æ max_consumption —É–∂–µ —É—á—Ç—ë–Ω –≤—ã—à–µ.
      end
    elseif recipe_proto.results then
      for _, prod in ipairs(recipe_proto.results) do
        local obj_name = prod.name
        seen_as_product[obj_name] = true
      end
    elseif recipe_proto.result then
      local obj_name = recipe_proto.result
      seen_as_product[obj_name] = true
    end
  end

  -- –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  -- 2.1 –¢–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –≤ ingredients
  for name, _ in pairs(seen_as_ingredient) do
    if seen_as_product[name] then
      -- –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –∏ —Ç–∞–º, –∏ —Ç–∞–º
      ingredient_groups.ingredients_and_products[name] = max_consumption[name] or 0
      -- –£–±–∏—Ä–∞–µ–º –∏–∑ seen_as_product, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤ exclusively_products
      seen_as_product[name] = nil
    else
      -- –¢–æ–ª—å–∫–æ –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
      ingredient_groups.exclusively_ingredients[name] = max_consumption[name] or 0
    end
  end

  -- 2.2 –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ seen_as_product ‚Äî —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –≤ ingredients
  for name, _ in pairs(seen_as_product) do
    -- –î–ª—è –Ω–∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ = 0
    ingredient_groups.exclusively_products[name] = 0
  end

  return ingredient_groups
end

--- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–∫–∞ –¥–ª—è item/fluid, —Å —É—á—ë—Ç–æ–º —Ñ–æ–ª–±—ç–∫–∞.
--- @param name string –ò–º—è —Ä–µ—Å—É—Ä—Å–∞
--- @param fluid_default number? –†–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∂–∏–¥–∫–æ—Å—Ç–∏
--- @param zero_fallback number? –ó–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ stack_size == 0
--- @return number stack_size –†–∞–∑–º–µ—Ä —Å—Ç–∞–∫–∞ –∏–ª–∏ zero_fallback
local function get_stack_size(name, fluid_default, zero_fallback)
  local stack_size = 0

  if prototypes.item[name] then
    stack_size = prototypes.item[name].stack_size
  elseif prototypes.fluid[name] then
    stack_size = fluid_default or 1000
  else
    game.print("–°–∏–≥–Ω–∞–ª –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å—Ç–∞–∫–∞: " .. tostring(name))
  end

  if stack_size == 0 and zero_fallback then
    return zero_fallback
  end

  return stack_size
end

--- –í—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∫–µ—Ç—ã –¥–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º (https://lua-api.factorio.com/latest/auxiliary/item-weight.html).
---@param item_name string –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞.
---@return integer –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –ª–∏–±–æ 0 –µ—Å–ª–∏ –∏–º—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–µ –ø—Ä–µ–¥–º–µ—Ç—É.
local function get_min_rocket_stack_size(item_name)
  if not prototypes.item or not prototypes.item[item_name] then
    game.print("[get_min_rocket_stack_size] '" .. item_name .. "' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º.")
    return 0
  end

  local item_prototype = prototypes.item[item_name]
  local weight = item_prototype.weight
  local ROCKET_LIFT_WEIGHT = 1000000

  if not weight or weight <= 0 then
    game.print("[get_min_rocket_stack_size] –£ –ø—Ä–µ–¥–º–µ—Ç–∞ '" .. item_name .. "' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å.")
    return 0
  end

  if weight > ROCKET_LIFT_WEIGHT then
    game.print("[get_min_rocket_stack_size] '" .. item_name .. "' —Å–ª–∏—à–∫–æ–º —Ç—è–∂—ë–ª—ã–π –¥–ª—è —Ä–∞–∫–µ—Ç—ã (–≤–µ—Å: " .. weight .. ").")
    return 0
  end

  return math.floor(ROCKET_LIFT_WEIGHT / weight + 0.5)
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–º—ë–Ω —Ä–µ—Ü–µ–ø—Ç–æ–≤ {"iron-chest", ...} –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Ç–æ—á–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∞ {"iron-chest" = 3, ...}
--- –í—ã—á–∏—Å–ª—è–µ—Ç ¬´—Ä–µ–π—Ç–∏–Ω–≥¬ª —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
-- 1) —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ (–∏–ª–∏, –µ—Å–ª–∏ flip, ‚Äî –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ),
-- 2) —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ { [recipe_name] = rating, ‚Ä¶ }
-- @param recipes table ‚Äî —Å–ª–æ–≤–∞—Ä—å { name ‚Üí prototype }
-- @param flip?   boolean ‚Äî –µ—Å–ª–∏ true, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –∑–µ—Ä–∫–∞–ª–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
local function get_recipe_rating(recipes, flip)
  -- 1) —Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É main_product ‚Üí { recipe_name, ‚Ä¶ }
  local produces = {}
  for rname, recipe in pairs(recipes) do
    local prod = recipe.main_product.name
    produces[prod] = produces[prod] or {}
    table.insert(produces[prod], rname)
  end

  -- 2) DFS –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  local function dfs(rname, seen)
    if seen[rname] then return end
    seen[rname] = true
    local rec = recipes[rname]
    if not rec or not rec.ingredients then return end
    for _, ing in ipairs(rec.ingredients) do
      for _, provider in ipairs(produces[ing.name] or {}) do
        dfs(provider, seen)
      end
    end
  end

  -- 3) —Å—á–∏—Ç–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
  local names, ratings = {}, {}
  for rname in pairs(recipes) do
    local seen = {}
    dfs(rname, seen)
    -- —Ä–µ–π—Ç–∏–Ω–≥ = —á–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ seen
    local cnt = 0
    for _ in pairs(seen) do cnt = cnt + 1 end
    ratings[rname] = cnt
    table.insert(names, rname)
  end

  -- 4) —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞
  table.sort(names, function(a, b)
    return ratings[a] > ratings[b]
  end)

  -- 5) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ¬´–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å¬ª:
  if flip then
    -- –∞) –Ω–∞–π–¥—ë–º min –∏ max –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º ratings
    local minV, maxV
    for _, score in pairs(ratings) do
      if not minV or score < minV then minV = score end
      if not maxV or score > maxV then maxV = score end
    end
    -- –±) –∑–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    for rname, score in pairs(ratings) do
      ratings[rname] = (minV + maxV) - score
    end
    -- –≤) —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω
    for i = 1, math.floor(#names / 2) do
      local j = #names - i + 1
      names[i], names[j] = names[j], names[i]
    end
  end

  return names, ratings
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∂–∏–¥–∫–æ—Å—Ç–µ–π —Ç–∏–ø–∞ –Ω–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–ø—É—Å—Ç–æ—à–∏—Ç—å –±–æ—á–∫—É
local function get_barrel_recipes_for_fluid(fluid_name)
  local result = {
    fluid_name = fluid_name,        -- –ò–º—è –∂–∏–¥–∫–æ—Å—Ç–∏
    filled_barrel_name = nil,       -- –ò–º—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –±–æ—á–∫–∏
    fill_barrel_recipe = nil,       -- –†–µ—Ü–µ–ø—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—á–∫–∏
    empty_barrel_recipe = nil,      -- –†–µ—Ü–µ–ø—Ç –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –±–æ—á–∫–∏
    assembler_activated_fluid = nil -- –ñ–∏–¥–∫–æ—Å—Ç—å, –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Ä–µ—Ü–µ–ø—Ç –≤ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ
  }

  -- –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –±–æ—á–∫–∏ (subgroup "empty-barrel") –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—á–∫–∏
  for name, recipe in pairs(prototypes.recipe) do
    if recipe.subgroup and recipe.subgroup.name == "empty-barrel" and recipe.ingredients then
      for _, ingredient in pairs(recipe.ingredients) do
        -- –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–º —Ä–µ—Ü–µ–ø—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–∫–æ–º–∞—è –∂–∏–¥–∫–æ—Å—Ç—å, —Ç–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç - —ç—Ç–æ –±–æ—á–∫–∞
        if recipe.products then
          for _, product in pairs(recipe.products) do
            if product.name == fluid_name then
              result.empty_barrel_recipe = name
              result.filled_barrel_name = ingredient.name -- –ò–º—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –±–æ—á–∫–∏
              break
            end
          end
        end
      end
    end
  end

  -- –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—á–∫–∏ (subgroup "fill-barrel")
  for name, recipe in pairs(prototypes.recipe) do
    if recipe.subgroup and recipe.subgroup.name == "fill-barrel" and recipe.ingredients then
      for _, ingredient in pairs(recipe.ingredients) do
        if ingredient.name == fluid_name then
          result.fill_barrel_recipe = name
          break
        end
      end
    end
  end

  -- –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–∏ —Å–∏–≥–Ω–∞–ª –∂–∏–¥–∫–æ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ
  for name, recipe in pairs(prototypes.recipe) do
    if recipe.category and recipe.category == "crafting-with-fluid" and recipe.ingredients then
      for _, ingredient in pairs(recipe.ingredients) do
        if ingredient.name == fluid_name then
          result.assembler_activated_fluid = fluid_name -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –∂–∏–¥–∫–æ—Å—Ç–∏
          break
        end
      end
    end
  end

  return result
end

--- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–º–µ–Ω—É –∂–∏–¥–∫–æ—Å—Ç–µ–π –Ω–∞ –±–æ—á–∫–∏.
--- @param recipe LuaRecipePrototype --[[ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç ]]
--- @return table[] --[[ –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥–∞—è ‚Äî –æ–¥–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è) ]]
local function get_alternative_ingredient_variants(recipe)
  if not recipe or not recipe.ingredients then
    return {}
  end

  --- –õ–æ–∫–∞–ª—å–Ω—ã–π deepcopy (–±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫)
  local function deepcopy(tbl)
    local res = {}
    for k, v in pairs(tbl) do
      if type(v) == "table" then
        res[k] = deepcopy(v)
      else
        res[k] = v
      end
    end
    return res
  end

  --- –í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
  local function expand_ingredient(ing)
    local list = { ing }
    if ing.type == "fluid" then
      local barrel = get_barrel_recipes_for_fluid(ing.name)
      if barrel and barrel.filled_barrel_name then
        table.insert(list, {
          name = barrel.filled_barrel_name,
          type = "item",
          amount = math.ceil((ing.amount or 1) / 50)
        })
      end
    end
    return list
  end

  --- –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)
  local function combine(options_by_slot)
    local result = { {} }
    for i = 1, #options_by_slot do
      local new_result = {}
      for _, partial in ipairs(result) do
        for _, variant in ipairs(options_by_slot[i]) do
          local next_combo = deepcopy(partial)
          table.insert(next_combo, variant)
          table.insert(new_result, next_combo)
        end
      end
      result = new_result
    end
    return result
  end

  --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
  local options_by_slot = {}
  for _, ing in ipairs(recipe.ingredients) do
    table.insert(options_by_slot, expand_ingredient(ing))
  end

  return combine(options_by_slot)
end

--- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞.
--- @param recipe table --[[ –†–µ—Ü–µ–ø—Ç —Å –ø–æ–ª–µ–º .ingredients = { {name=string, type=string, amount=number}, ‚Ä¶ } –∏–ª–∏ –º–µ—Ç–æ–¥–æ–º :get_ingredients(). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏ —Ñ–æ—Ä–º–∞ {name, amount}. ]]
--- @return number --[[ –û–±—â–∞—è —Å—É–º–º–∞ amount –ø–æ –≤—Å–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º ]]
local function get_total_ingredients_count(recipe)
  if not recipe then
    return 0
  end

  -- –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
  local ingredients = recipe.ingredients
  if not ingredients and type(recipe.get_ingredients) == "function" then
    ingredients = recipe:get_ingredients()
  end
  if not ingredients then
    return 0
  end

  -- —Å—É–º–º–∏—Ä—É–µ–º
  local total = 0
  for _, ing in ipairs(ingredients) do
    -- –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–ª—è .amount –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É {name, amount}
    local amount = ing.amount or ing[2] or 0
    total = total + amount
  end

  return total
end

-- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
-- local count = get_total_ingredients_count(prototypes.recipe["iron-gear-wheel"])
-- game.print("–í—Å–µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: " .. count)


--- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ amount –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤.
--- @param recipes table ‚Äî —Å–ª–æ–≤–∞—Ä—å —Ä–µ—Ü–µ–ø—Ç–æ–≤ { [name] = LuaRecipePrototype, ‚Ä¶ }
--- @return table<string, number> ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –≤–∏–¥–∞ { [ingredient_name] = max_amount, ‚Ä¶ }
local function get_max_ingredient_amounts(recipes)
  local result = {}

  for _, recipe_proto in pairs(recipes) do
    local ingredients = recipe_proto.ingredients
    if ingredients then
      for _, ing in ipairs(ingredients) do
        local name = ing.name
        local amount = ing.amount or 0
        if not result[name] or amount > result[name] then
          result[name] = amount
        end
      end
    end
  end

  return result
end


--- –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥)
--- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–∏–¥–∞ { { name=string, value=number }, ‚Ä¶ }
--- @param signals table[] —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –ø–æ–ª—è name –∏ value
--- @return table[] unique_signals —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª—è value
--- @return table<string, number> shifts –∫–∞—Ä—Ç–∞ —Å–¥–≤–∏–≥–æ–≤: shifts[name] = —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É value
local function uniquify_signal_values(signals)
  local used   = {} -- set –¥–ª—è —É–∂–µ –∑–∞–Ω—è—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  local unique = {} -- —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  local shifts = {} -- —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–º–µ—â–µ–Ω–∏–π

  for _, sig in ipairs(signals) do
    local name  = sig.name
    local orig  = sig.value
    local val   = orig
    local shift = 0

    -- –µ—Å–ª–∏ orig —É–∂–µ –∑–∞–Ω—è—Ç, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π orig + i
    if used[val] then
      local i = 1
      while used[orig + i] do
        i = i + 1
      end
      val   = orig + i
      shift = i
    end

    -- –æ—Ç–º–µ—á–∞–µ–º val –∫–∞–∫ –∑–∞–Ω—è—Ç–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    used[val] = true
    table.insert(unique, { name = name, value = val })
    shifts[name] = shift
  end

  return unique, shifts
end

--- –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö item-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞.
--- @param recipe LuaRecipePrototype ‚Äî —Ä–µ—Ü–µ–ø—Ç
--- @param multiplier number? ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
--- @param add number? ‚Äî —Å–ª–∞–≥–∞–µ–º–æ–µ, –ø—Ä–∏–±–∞–≤–ª—è–µ–º–æ–µ –∫ –∫–∞–∂–¥–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
--- @return integer ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (fluid –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
function calculate_ingredient_slot_usage(recipe, multiplier, add)
  multiplier = multiplier or 1
  add = add or 0

  if not recipe or not recipe.ingredients then
    return 0
  end

  local slot_count = 0
  for _, ing in ipairs(recipe.ingredients) do
    if ing.type == "item" then
      local amount = (ing.amount or 0) * multiplier + add
      local stack_size = get_stack_size(ing.name)
      slot_count = slot_count + math.ceil(amount / stack_size)
    end
  end

  return slot_count
end

--#endregion ‚ñ≤‚ñ≤ –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

--#region ‚ñº‚ñº –ò–∑–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

--- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–ª—é—á–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.
---@param tbl table –õ—é–±–∞—è —Ç–∞–±–ª–∏—Ü–∞.
---@return string[] keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π tbl.
local function get_keys(tbl)
  local keys = {}
  for key, _ in pairs(tbl) do
    table.insert(keys, key)
  end
  return keys
end
--#endregion ‚ñ≤‚ñ≤ –ò–∑–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

--#region ‚ñº‚ñº ‚òÜ‚òÜ‚òÜ –†–∞–±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ Lua

local Set = {}

function Set.U(a, b, ...) -- –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ (union ‚à™)
  local res = {}
  for k, v in pairs(a) do res[k] = v end
  for k, v in pairs(b or {}) do res[k] = v end
  if ... then return Set.U(res, ...) end
  return res
end

function Set.I(a, b, ...) -- –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (intersection ‚à©)
  local res = {}
  for k, v in pairs(a) do if b[k] then res[k] = v end end
  if ... then return Set.I(res, ...) end
  return res
end

function Set.D(a, b, ...) -- —Ä–∞–∑–Ω–æ—Å—Ç—å (difference -)
  local res = {}
  for k, v in pairs(a) do if not b[k] then res[k] = v end end
  if ... then return Set.D(res, ...) end
  return res
end

function Set.S(a, b, ...) -- —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å (symmetric difference Œî)
  local res = {}
  for k, v in pairs(a) do if not b[k] then res[k] = v end end
  for k, v in pairs(b) do if not a[k] then res[k] = v end end
  if ... then return Set.S(res, ...) end
  return res
end

--#endregion ‚ñ≤‚ñ≤ –†–∞–±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ Lua

--#region ‚ñº‚ñº –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–ª—è update_cc_storage)

local Upd = {}

--- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ¬´–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–µ—Ä–∞¬ª: –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –∫ old: start, –∑–∞—Ç–µ–º start+step, start+2*step, ...
-- @param start number ‚Äî –ø–µ—Ä–≤–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
-- @param step  number ‚Äî —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
-- @return function(old)->new
function Upd.inc(start, step)
  start          = start or 1
  step           = step or 1
  local next_add = start
  return function(old)
    local add = next_add
    next_add = next_add + step
    return old + add
  end
end

--- –í—Å–µ–≥–¥–∞ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç n  (–∞–Ω–∞–ª–æ–≥ add)
-- @param n number
-- @return function(old)->new
function Upd.add(n)
  n = n or 0
  return function(old)
    return old + n
  end
end

--- –í—Å–µ–≥–¥–∞ —É–º–Ω–æ–∂–∞–µ—Ç –Ω–∞ n (–∞–Ω–∞–ª–æ–≥ multiply)
-- @param n number
-- @return function(old)->new
function Upd.mul(n)
  n = n or 1
  return function(old)
    return old * n
  end
end

--- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä-—Å—á—ë—Ç—á–∏–∫: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1, 2, 3, ... –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
-- @param start number ‚Äî —Å –∫–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—á–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
-- @param step  number ‚Äî —à–∞–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
-- @return function(_)->number
function Upd.count(start, step)
  start         = start or 1
  step          = step or 1
  local current = start - step
  return function(_)
    current = current + step
    return current
  end
end

--#endregion ‚ñ≤‚ñ≤ –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–ª—è update_cc_storage)

--#region ‚ñº –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Ñ–æ—Ä–º—ã —Å–∏–≥–Ω–ª–æ–≤/—É—Å–ª–æ–≤–∏–π)

-- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –∂–∏–¥–∫–æ—Å—Ç–µ–π –∏ –±–æ—á–µ–∫
-- @param ingredient_list table —Å–ø–∏—Å–æ–∫ { { name, type, amount }, ‚Ä¶ }
-- @param offset number?     —Å–∫–æ–ª—å–∫–æ –≤—ã—á–µ—Å—Ç—å –∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
-- @param multiplier number? –Ω–∞ –∫–∞–∫–æ–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–º–Ω–æ–∂–∏—Ç—å ing.amount (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
local function build_ingredient_combinations(ingredient_list, offset, multiplier)
  offset                  = offset or 0
  multiplier              = multiplier or 1

  local groups            = {}
  local has_barrel_option = false

  for _, ing in ipairs(ingredient_list) do
    local amount = ing.amount * multiplier
    local opts = {}

    -- 1) –û–±—ã—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    local base_signal = {
      name    = ing.name,
      quality = qualities[1],
      type    = ing.type,
    }

    local base_networks
    if ing.type == "fluid" then
      base_networks = { red = true, green = false }
    else
      base_networks = { red = false, green = true }
    end

    table.insert(opts, {
      first_signal          = base_signal,
      comparator            = "‚â•",
      constant              = offset + amount,
      first_signal_networks = base_networks,
    })

    -- 2) –í–∞—Ä–∏–∞–Ω—Ç —Å –±–æ—á–∫–æ–π
    if ing.type == "fluid" then
      local bar = get_barrel_recipes_for_fluid(ing.name)
      if bar.filled_barrel_name then
        has_barrel_option = true
        table.insert(opts, {
          first_signal          = { name = bar.filled_barrel_name, quality = qualities[1], type = ing.type },
          comparator            = "‚â•",
          constant              = offset + math.ceil(amount / 50),
          first_signal_networks = { red = false, green = true },
        })
      end
    end

    table.insert(groups, opts)
  end

  if not has_barrel_option then
    local and_group = { "and" }
    for _, opts in ipairs(groups) do
      table.insert(and_group, opts[1])
    end
    return { "or", and_group }
  end

  local combos = { {} }
  for _, opts in ipairs(groups) do
    local new_combos = {}
    for _, seq in ipairs(combos) do
      for _, entry in ipairs(opts) do
        local copy = { table.unpack(seq) }
        table.insert(copy, entry)
        table.insert(new_combos, copy)
      end
    end
    combos = new_combos
  end

  local result = { "or" }
  for _, seq in ipairs(combos) do
    local and_group = { "and" }
    for _, entry in ipairs(seq) do
      table.insert(and_group, entry)
    end
    table.insert(result, and_group)
  end

  return result
end


--- –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —Ä–µ—Ü–µ–ø—Ç–∞ —Å–ø–∏—Å–∫–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π-–ø—Ä–æ–¥—É–∫—Ç–æ–≤
-- @param recipe LuaPrototype ‚Äî –ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞
-- @return table —Å –ø–æ–ª—è–º–∏:
--   ingredients = { "water", ‚Ä¶ } ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π –∏–∑ recipe.ingredients
--   products    = { "crude-oil", ‚Ä¶ } ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π –∏–∑ recipe.products/results/result
local function extract_fluid_data(recipe)
  local data = {
    ingredients = {},
    products    = {}
  }

  -- 1) –ñ–∏–¥–∫–æ—Å—Ç–∏ –≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö
  if recipe.ingredients then
    for _, ing in ipairs(recipe.ingredients) do
      if ing.type == "fluid" then
        table.insert(data.ingredients, ing.name)
      end
    end
  end

  -- 2) –ñ–∏–¥–∫–æ—Å—Ç–∏ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
  if recipe.products then
    for _, prod in ipairs(recipe.products) do
      if prod.type == "fluid" then
        table.insert(data.products, prod.name)
      end
    end
  elseif recipe.results then
    for _, prod in ipairs(recipe.results) do
      if prod.type == "fluid" then
        table.insert(data.products, prod.name)
      end
    end
  elseif recipe.result and recipe.result_type == "fluid" then
    table.insert(data.products, recipe.result)
  end

  -- –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  local function unique(list)
    local seen, out = {}, {}
    for _, v in ipairs(list) do
      if not seen[v] then
        seen[v] = true
        table.insert(out, v)
      end
    end
    return out
  end

  data.ingredients = unique(data.ingredients)
  data.products    = unique(data.products)

  return data
end

--#endregion ‚ñ≤ –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Ñ–æ—Ä–º—ã —Å–∏–≥–Ω–ª–æ–≤/—É—Å–ª–æ–≤–∏–π)

--#endregion ‚ñ≤ –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

--#region ‚ñº –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

-- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü-–º–Ω–æ–∂–µ—Å—Ç–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤
local function global_recipe_filtered()
  -- ‚òÜ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ parameter
  local function has_parameter_item_ingredient(recipe)
    if not recipe.ingredients then return false end
    for _, ing in pairs(recipe.ingredients) do
      if ing.type == "item" then
        local proto = prototypes.item[ing.name]
        if proto and proto.parameter then
          return true
        end
      end
    end
    return false
  end

  -- ‚òÜ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∞–º
  local function get_recipes_by_effects()
    local effect_names = { "productivity", "quality", "speed" }
    for _, effect in ipairs(effect_names) do
      if not prototypes.module_category[effect] then
        error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–¥—É–ª—è: " .. effect)
      end
    end
    local result = {}
    for _, effect in ipairs(effect_names) do
      result[effect] = {}
    end
    for name, recipe in pairs(prototypes.recipe) do
      local effects = recipe.allowed_effects
      if effects then
        for _, effect in ipairs(effect_names) do
          if effects[effect] then
            result[effect][name] = recipe
          end
        end
      end
    end
    return result
  end

  -- ‚òÜ –£–¥–∞–ª—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  local function filter_invalid_recipes(recipe_table, invalid_recipes)
    for key, value in pairs(recipe_table) do
      if type(value) == "table" then
        -- –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–º –∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
        recipe_table[key] = filter_invalid_recipes(value, invalid_recipes)
      end
    end
    return Set.D(recipe_table, invalid_recipes)
  end

  -- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
  local function is_allowed_on_surface(recipe, surface)
    if not recipe.surface_conditions then return true end
    for _, cond in ipairs(recipe.surface_conditions) do
      local prop = cond.property
      local minv = cond.min or -math.huge
      local maxv = cond.max or math.huge

      local success, value = pcall(function() return surface.get_property(prop) end)
      if not success or value == nil then
        return false
      end

      if value < minv or value > maxv then
        return false
      end
    end
    return true
  end

  -- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –∫–∞–∂–¥–æ–π "–ø–µ—Ç–ª–∏" —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
  local function get_cyclic_recipes(recipes_table)
    ------------------------------------------------------------------
    -- 0. –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    ------------------------------------------------------------------
    local source = recipes_table or prototypes.recipe

    ------------------------------------------------------------------
    -- 1. –°–æ–±–µ—Ä—ë–º –µ–¥–∏–Ω—É—é ¬´–ø–ª–æ—Å–∫—É—é¬ª –∫–æ–ª–ª–µ–∫—Ü–∏—é recipe-prototype-–æ–≤
    ------------------------------------------------------------------
    local recipe_list = {}   -- { <proto>, ‚Ä¶ } ‚Äì –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–π –º–∞—Å—Å–∏–≤–æ–º
    local name_to_proto = {} -- name ‚Üí prototype

    for k, v in pairs(source) do
      local proto =
          (type(k) == "table" and k.name and k)             -- Set-–º–Ω–æ–∂–µ—Å—Ç–≤–æ
          or (type(v) == "table" and v.name and v)          -- –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤
          or (type(k) == "string" and prototypes.recipe[k]) -- set —Å –∏–º–µ–Ω–∞–º–∏
      if proto and not name_to_proto[proto.name] then
        name_to_proto[proto.name] = proto
        recipe_list[#recipe_list + 1] = proto
      end
    end

    ------------------------------------------------------------------
    -- 2. –ö–∞—Ä—Ç—ã produces / consumes
    --    produces[item]   ‚Üí {recipe-name,‚Ä¶}
    --    consumes[recipe] ‚Üí {item-name,‚Ä¶}
    ------------------------------------------------------------------
    local produces, consumes = {}, {}

    local function add_item(tbl, key, val)
      local t = tbl[key]
      if not t then
        t = {}; tbl[key] = t
      end
      t[#t + 1] = val
    end

    for _, recipe in ipairs(recipe_list) do
      local rname = recipe.name
      consumes[rname] = {}

      -- ‚ú¶ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      local ingredients = recipe.ingredients or (recipe.get_ingredients and recipe:get_ingredients()) or {}
      for _, ing in pairs(ingredients) do
        local iname = ing.name or ing[1] -- –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º—ã
        if iname then add_item(consumes, rname, iname) end
      end

      -- ‚ú¶ –ø—Ä–æ–¥—É–∫—Ç—ã
      local products = recipe.products or recipe.results
          or (recipe.get_products and recipe:get_products()) or {}
      for _, prod in pairs(products) do
        local pname = prod.name or prod[1]
        if pname then add_item(produces, pname, rname) end
      end
    end

    ------------------------------------------------------------------
    -- 3. –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: adj[recipe] ‚Üí {recipe,‚Ä¶}
    ------------------------------------------------------------------
    local adj = {}
    for rname, items in pairs(consumes) do
      local edges = {}
      adj[rname] = edges
      for _, item in ipairs(items) do
        local makers = produces[item]
        if makers then
          for _, maker in ipairs(makers) do
            edges[#edges + 1] = maker
          end
        end
      end
    end

    ------------------------------------------------------------------
    -- 4. Tarjan (SCC) ‚Äì –ø–æ–∏—Å–∫ —Ü–∏–∫–ª–æ–≤
    ------------------------------------------------------------------
    local index, stack               = 0, {}
    local indices, lowlink, on_stack = {}, {}, {}
    local cyclic                     = {} -- –∏–º—è ‚Üí prototype

    local function strongconnect(v)
      index = index + 1
      indices[v], lowlink[v] = index, index
      stack[#stack + 1] = v
      on_stack[v] = true

      local nbrs = adj[v]
      if nbrs then
        for _, w in ipairs(nbrs) do
          if not indices[w] then
            strongconnect(w)
            if lowlink[w] < lowlink[v] then lowlink[v] = lowlink[w] end
          elseif on_stack[w] and indices[w] < lowlink[v] then
            lowlink[v] = indices[w]
          end
        end
      end

      if lowlink[v] == indices[v] then -- –∫–æ—Ä–µ–Ω—å SCC
        local comp = {}
        local w
        repeat
          w = stack[#stack]
          stack[#stack] = nil
          on_stack[w] = nil
          comp[#comp + 1] = w
        until w == v

        if #comp > 1 then -- —Ü–∏–∫–ª –¥–ª–∏–Ω–æ–π >1
          for _, r in ipairs(comp) do
            cyclic[r] = name_to_proto[r]
          end
        else -- –≤–æ–∑–º–æ–∂–Ω–∞—è —Å–∞–º–æ–ø–µ—Ç–ª—è
          local r = comp[1]
          local e = adj[r]
          if e then
            for _, dst in ipairs(e) do
              if dst == r then -- —Ä–µ—Ü–µ–ø—Ç –µ—Å—Ç —Å–∞–º —Å–µ–±—è
                cyclic[r] = name_to_proto[r]
                break
              end
            end
          end
        end
      end
    end

    for v in pairs(adj) do
      if not indices[v] then strongconnect(v) end
    end

    return cyclic -- { name = proto, ‚Ä¶ }
  end

  local global_recipe_table = {}

  -- ‚òÜ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä—ã—Ç—ã –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
  global_recipe_table.invalid_recipes = {}
  global_recipe_table.parameter_recipes = {}
  for name, recipe in pairs(prototypes.recipe) do
    local is_param = recipe.parameter or has_parameter_item_ingredient(recipe)
    if is_param then
      global_recipe_table.parameter_recipes[name] = recipe
    end
    if recipe.hidden or is_param then
      global_recipe_table.invalid_recipes[name] = recipe
    end
  end

  -- ‚òÜ‚òÜ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —É –∫–æ—Ç–æ—Ä—ã—Ö –í–°–ï –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Ç–∏–ø –∂–∏–¥–∫–æ—Å—Ç–∏
  global_recipe_table.fluid_only_ingredient_recipes = prototypes.get_recipe_filtered {
    {
      filter = "has-ingredient-item",
      invert = true
    },
    {
      filter = "has-ingredient-fluid",
      mode = "and"
    }
  }

  -- ‚òÜ‚òÜ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —É –∫–æ—Ç–æ—Ä—ã—Ö –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç —Ç–∏–ø –∂–∏–¥–∫–æ—Å—Ç–∏
  global_recipe_table.fluid_only_product_recipes = prototypes.get_recipe_filtered {
    {
      filter = "has-product-item",
      invert = true
    },
    {
      filter = "has-product-fluid",
      mode = "and"
    }
  }

  -- ‚òÜ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∞–º productivity, quality, speed
  global_recipe_table.recipes_by_effect = get_recipes_by_effects()

  -- ‚òÜ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ö
  global_recipe_table.all_surface_recipes = {}
  for name, recipe in pairs(prototypes.recipe) do
    if not recipe.surface_conditions then
      global_recipe_table.all_surface_recipes[name] = recipe
    end
  end

  -- -- ‚òÜ –†–µ—Ü–µ–ø—Ç—ã, —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ **** !?
  -- global_recipe_table.surface_recipes = {}
  -- for _, surface in pairs(game.surfaces) do
  --   local name = surface.name
  --   global_recipe_table.surface_recipes[name] = {}

  --   for recipe_name, recipe in pairs(prototypes.recipe) do
  --     if is_allowed_on_surface(recipe, surface) then
  --       global_recipe_table.surface_recipes[name][recipe_name] = recipe
  --     end
  --   end
  -- end

  -- –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å main_product
  global_recipe_table.recipes_with_main = {}
  for name, recipe in pairs(prototypes.recipe) do
    if recipe.main_product then
      global_recipe_table.recipes_with_main[name] = recipe
    end
  end

  -- ‚òÜ –í—Å–µ –º–∞—à–∏–Ω—ã –∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö
  global_recipe_table.machines = {}
  for name, entity in pairs(prototypes.entity) do
    if entity.crafting_categories then
      local recipes = {}
      for recipe_name, recipe in pairs(prototypes.recipe) do
        if entity.crafting_categories[recipe.category] then
          recipes[recipe_name] = recipe
        end
      end
      global_recipe_table.machines[name] = recipes
    end
  end

  -- ‚òÜ –í—Å–µ –º–∞—à–∏–Ω—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç —Å–∏–≥–Ω–∞–ª–æ–º
  local machines_ass = {}
  for name, entity in pairs(prototypes.entity) do
    if entity.type == "assembling-machine" and not entity.fixed_recipe then
      machines_ass[name] = entity
    end
  end
  global_recipe_table.machines_ass = Set.I(global_recipe_table.machines, machines_ass)

  -- –í—Å–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã. –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç main_product –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –∂–µ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –∏–ª–∏ –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç –¥–≤—É—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç "–ø–æ –∫—Ä—É–≥—É"
  local recipes = Set.D(global_recipe_table.recipes_with_main, global_recipe_table.invalid_recipes)
  global_recipe_table.cyclic_recipes = get_cyclic_recipes(recipes)

  -- ‚òÜ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —è–≤–ª—è—é—â–∏–µ—Å—è –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ –±–æ—á–∫–∏
  global_recipe_table.empty_barrel = prototypes.get_recipe_filtered {
    { filter = "subgroup", subgroup = "empty-barrel" }
  }

  -- ‚òÜ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —è–≤–ª—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—á–∫–∏
  global_recipe_table.fill_barrel = prototypes.get_recipe_filtered {
    { filter = "subgroup", subgroup = "fill-barrel" }
  }

  -- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–∞—à–∏–Ω —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Ç–∏–ø–∞ assembling_machines
  global_recipe_table.assembling_machines = {}
  -- –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –º–∞—à–∏–Ω (–≤–ø–µ—Ä–µ–º–µ—à–∫—É)
  global_recipe_table.all_assembling_recipes = {}
  for name, entity in pairs(prototypes.entity) do
    if entity.type == "assembling-machine" and entity.crafting_categories and not entity.fixed_recipe then
      local machine_recipes = {}
      for recipe_name, recipe in pairs(prototypes.recipe) do
        if recipe.category and entity.crafting_categories[recipe.category] then
          machine_recipes[recipe_name] = recipe
          global_recipe_table.all_assembling_recipes[recipe_name] = recipe
        end
      end
      if next(machine_recipes) then
        global_recipe_table.assembling_machines[name] = machine_recipes
      end
    end
  end
  global_recipe_table.all_assembling_recipes = Set.I(prototypes.recipe, global_recipe_table.all_assembling_recipes)


  -- –í—Å–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:
  -- –ú–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –º–∞—à–∏–Ω–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É ‚úì
  -- –ù–µ –ø—É—Å—Ç—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã/–ø—Ä–æ–¥—É–∫—Ç—ã ...
  -- –ù–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å–≤–∞–ø–æ–≤ ...
  -- –ö—Ä–∞—Ñ—Ç–∏—Ç—å—Å—è –Ω–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ ...
  global_recipe_table.usefull_recipes = Set.D(global_recipe_table.all_assembling_recipes, Set.U(
    global_recipe_table.empty_barrel,
    global_recipe_table.fill_barrel))


  -- –í—Å–µ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ 2+:
  -- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç/–ü–æ—Ç—Ä–µ–±–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∂–∏–¥–∫–æ—Å—Ç—å ‚úì
  -- –ù–µ –∏–º–µ–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ ...
  global_recipe_table.quality_useless_recipes = Set.U(
    global_recipe_table.fluid_only_ingredient_recipes,
    global_recipe_table.fluid_only_product_recipes)

  -- ‚òÜ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º, –∏—Å–∫–ª—é—á–∞—è invalid_recipes
  for key, value in pairs(global_recipe_table) do
    if key ~= "invalid_recipes" and key ~= "parameter_recipes" then
      global_recipe_table[key] = filter_invalid_recipes(value, global_recipe_table.invalid_recipes)
    end
  end

  return global_recipe_table
end

-- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü-–º–Ω–æ–∂–µ—Å—Ç–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π
local function global_item_or_fluid_filtered()
  -- –°–±–æ—Ä –≤—Å–µ—Ö –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∏–º—ë–Ω item –∏ fluid
  local function collect_invalid_resource_names()
    local invalid = {}
    for name, item in pairs(prototypes.item) do
      if item.parameter or item.hidden or item.subgroup.name == "spawnables" then
        invalid[name] = true
      end
    end
    for name, fluid in pairs(prototypes.fluid) do
      if fluid.parameter or fluid.hidden then
        invalid[name] = true
      end
    end
    return invalid
  end

  local global_resource_table = {}

  global_resource_table.invalid_names = collect_invalid_resource_names()

  -- –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
  global_resource_table.all_items = {}
  for name, item in pairs(prototypes.item) do
    global_resource_table.all_items[name] = item
  end

  -- –í—Å–µ –∂–∏–¥–∫–æ—Å—Ç–∏
  global_resource_table.all_fluids = {}
  for name, fluid in pairs(prototypes.fluid) do
    global_resource_table.all_fluids[name] = fluid
  end

  -- –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å main_product
  global_resource_table.resource_main_product = {}
  for _, recipe in pairs(global_recipe_table.recipes_with_main) do
    local main = recipe.main_product
    if main and main.name and main.type then
      if main.type == "item" then
        local item = prototypes.item[main.name]
        if item then
          global_resource_table.resource_main_product[main.name] = item
        end
      elseif main.type == "fluid" then
        local fluid = prototypes.fluid[main.name]
        if fluid then
          global_resource_table.resource_main_product[main.name] = fluid
        end
      end
    end
  end

  -- –†–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∫–∞–∫ main_product –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö
  global_resource_table.resource_repeating_main_product = {}
  local product_to_recipes = {}

  for recipe_name, recipe in pairs(global_recipe_table.recipes_with_main) do
    local main = recipe.main_product
    if main and main.name then
      local key = main.name
      product_to_recipes[key] = product_to_recipes[key] or {}
      product_to_recipes[key][recipe_name] = recipe
    end
  end

  for product_name, recipe_map in pairs(product_to_recipes) do
    local count = 0
    for _ in pairs(recipe_map) do count = count + 1 end
    if count > 1 then
      global_resource_table.resource_repeating_main_product[product_name] = recipe_map
    end
  end

  -- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∏–º–µ–Ω–∞, –∫—Ä–æ–º–µ –ø–æ–ª—è invalid_names
  local function filter_invalid_except_invalid_names(tbl, invalid_names)
    local function recursive_filter(t)
      for k, v in pairs(t) do
        if type(v) == "table" then
          t[k] = recursive_filter(v)
        end
      end
      return Set.D(t, invalid_names)
    end

    for key, value in pairs(tbl) do
      if key ~= "invalid_names" and type(value) == "table" then
        tbl[key] = recursive_filter(value)
      end
    end
  end

  -- –í—ã–∑–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  filter_invalid_except_invalid_names(global_resource_table, global_resource_table.invalid_names)

  return global_resource_table
end

--#endregion ‚ñ≤ –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

--#region ‚ñº –ö–ª–∞—Å—Å DeciderC —Ä–µ—à–∞—é—â–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞

-- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –≤ "and" –∏ "or"
local function AND(...)
  return { "and", ... }
end

local function OR(...)
  return { "or", ... }
end

-- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å Combinator (—Ä–µ—à–∞—é—â–∏–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä)
local DeciderC = {}
DeciderC.__index = DeciderC

-- –§—É–Ω–∫—Ü–∏—è process_expr –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –î–ù–§ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
local function process_expr(expr)
  local function is_logic_node(x)
    return type(x) == "table" and (x[1] == "and" or x[1] == "or")
  end

  local function cross_product(lists)
    if #lists == 0 then return {} end
    local result = { {} }
    for _, list in ipairs(lists) do
      local new_result = {}
      for _, seq in ipairs(result) do
        for _, item in ipairs(list) do
          local new_seq = { table.unpack(seq) }
          table.insert(new_seq, item)
          table.insert(new_result, new_seq)
        end
      end
      result = new_result
    end
    return result
  end

  local function flatten(op, args)
    local result = {}
    for _, arg in ipairs(args) do
      if is_logic_node(arg) and arg[1] == op then
        for _, sub in ipairs(flatten(op, { table.unpack(arg, 2) })) do
          table.insert(result, sub)
        end
      else
        table.insert(result, arg)
      end
    end
    return result
  end

  local function to_dnf(expr)
    if not is_logic_node(expr) then
      return expr
    end

    local op = expr[1]
    local args = { table.unpack(expr, 2) }
    local dnf_args = {}
    for _, arg in ipairs(args) do
      table.insert(dnf_args, to_dnf(arg))
    end

    if op == "or" then
      return OR(table.unpack(flatten("or", dnf_args)))
    elseif op == "and" then
      local sets = {}
      for _, arg in ipairs(dnf_args) do
        if is_logic_node(arg) and arg[1] == "or" then
          table.insert(sets, { table.unpack(arg, 2) })
        else
          table.insert(sets, { arg })
        end
      end

      local combos = cross_product(sets)
      local result = {}
      for _, combo in ipairs(combos) do
        table.insert(result, AND(table.unpack(flatten("and", combo))))
      end

      return OR(table.unpack(result))
    end
  end

  local function normalize_condition(condition)
    local first = condition.first_signal
    local second = condition.second_signal

    if first then
      condition.first_signal = sdp_signal_dc(first)
    end
    if second then
      condition.second_signal = sdp_signal_dc(second)
    end

    local first_name = first and first.name
    local is_signal_each = first_name == "signal-each"

    if condition.compare_type == nil then
      condition.compare_type = is_signal_each and "or" or "and"
    end

    if condition.comparator == nil then
      condition.comparator = is_signal_each and "=" or ">"
    end

    if condition.constant == nil then
      condition.constant = is_signal_each and nil or 0
    end

    local default_or_nets = { red = true, green = false }
    local default_and_nets = { red = false, green = true }

    if is_signal_each then
      if condition.first_signal_networks == nil then
        condition.first_signal_networks = default_or_nets
      end
      if condition.second_signal and condition.second_signal_networks == nil then
        condition.second_signal_networks = default_or_nets
      end
    else
      if condition.first_signal_networks == nil then
        condition.first_signal_networks = default_and_nets
      end
      if condition.second_signal and condition.second_signal_networks == nil then
        condition.second_signal_networks = default_and_nets
      end
    end

    return condition
  end

  local function fix_or_redundancy(conditions)
    local or_streak = 0
    for _, cond in ipairs(conditions) do
      if cond.compare_type == "or" then
        or_streak = or_streak + 1
        if or_streak == 2 then
          cond.compare_type = "and"
        elseif or_streak >= 3 then
          log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥—Ä—è–¥ —É—Å–ª–æ–≤–∏–π 'or', —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–æ–π –ª–æ–≥–∏–∫–∏.")
        end
      else
        or_streak = 0
      end
    end
  end

  local function flatten_dnf_to_conditions(dnf)
    local conditions = {}
    assert(dnf[1] == "or", "–û–∂–∏–¥–∞–ª—Å—è –∫–æ—Ä–µ–Ω—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è 'or'")
    for _, group in ipairs({ table.unpack(dnf, 2) }) do
      assert(group[1] == "and", "–û–∂–∏–¥–∞–ª–∞—Å—å –≥—Ä—É–ø–ø–∞ 'and'")
      local found_or = nil
      local others = {}
      for _, cond in ipairs({ table.unpack(group, 2) }) do
        local norm = normalize_condition(cond)
        if norm.compare_type == "or" and norm.first_signal and norm.first_signal.name == "signal-each" then
          found_or = norm
        else
          table.insert(others, norm)
        end
      end
      assert(found_or ~= nil, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ 'or' —Å signal-each –≤ –≥—Ä—É–ø–ø–µ")
      table.insert(conditions, found_or)
      for _, cond in ipairs(others) do
        table.insert(conditions, cond)
      end
    end
    fix_or_redundancy(conditions)
    return conditions
  end

  local dnf = to_dnf(expr)
  local conditions = flatten_dnf_to_conditions(dnf)
  return conditions
end

------------------------------------------------------------
-- –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞.
-- –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
-- set_decider_combinator_parameters.
------------------------------------------------------------
local function updated_set_decider_combinator_parameters(entity, settings)
  -- local behavior = entity.get_or_create_control_behavior()
  entity.parameters = {
    conditions = settings.conditions or {},
    outputs = settings.outputs or {
      {
        signal = { name = "signal-each", type = "virtual" },
        copy_count_from_input = true,
        networks = { red = true, green = false }
      }
    }
  }
end

--- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä DeciderC
-- @param entity LuaEntity ‚Äî –∏–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç —Ä–µ—à–∞—é—â–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞
function DeciderC:new(entity)
  if not entity or type(entity.get_or_create_control_behavior) ~= "function" then
    error("[DeciderC] invalid object")
  end
  local behavior = entity:get_or_create_control_behavior()
  if not behavior or not behavior.valid then
    error("[DeciderC] control behavior invalid")
  end
  local self = setmetatable({}, DeciderC)
  self._behavior = behavior
  self.conditions = {} -- —É—Å–ª–æ–≤–∏—è —Ä–µ—à–∞—é—â–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞
  return self
end

------------------------------------------------------------
-- –ú–µ—Ç–æ–¥ add_expr.
-- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —É—Å–ª–æ–≤–∏–π —á–µ—Ä–µ–∑ process_expr,
-- –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∫ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º.
------------------------------------------------------------
function DeciderC:add_expr(expr)
  local new_conditions = process_expr(expr)
  for _, cond in ipairs(new_conditions) do
    table.insert(self.conditions, cond)
  end
end

------------------------------------------------------------
-- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π,
-- –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.
------------------------------------------------------------
function DeciderC:add_conditions(conds)
  for _, cond in ipairs(conds) do
    table.insert(self.conditions, cond)
  end
end

------------------------------------------------------------
-- –ú–µ—Ç–æ–¥ apply_settings.
-- –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (conditions –∏ outputs) –∫ Lua –æ–±—ä–µ–∫—Ç—É –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞,
-- –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
------------------------------------------------------------
function DeciderC:apply_settings(outputs)
  local settings = { conditions = self.conditions, outputs = outputs }
  updated_set_decider_combinator_parameters(self._behavior, settings)
end

--#endregion ‚ñ≤ –ö–ª–∞—Å—Å —Ä–µ—à–∞—é—â–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞

--#region ‚ñº –ö–ª–∞—Å—Å SectionCC –ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞

--- –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ —Ü–µ–ª–µ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
-- @param storage table ‚Äî —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∏–¥–∞ [name][quality][type] = min
-- @param norm {name=string, quality=string, type=string, min=number}
function add_signal_to_storage(storage, norm)
  local n, q, t, m = norm.name, norm.quality, norm.type, norm.min
  storage[n]       = storage[n] or {}
  storage[n][q]    = storage[n][q] or {}
  storage[n][q][t] = (storage[n][q][t] or 0) + m
end

SectionCC = {}
SectionCC.__index = function(self, key)
  if SectionCC[key] then return SectionCC[key] end
  local first = self._sections and self._sections[1]
  if first and first[key] then
    if type(first[key]) == "function" then
      return function(tbl, ...) return first[key](first, ...) end
    else
      return first[key]
    end
  end
  return nil
end

--- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ¬´–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π¬ª —Å–µ–∫—Ü–∏–∏
-- @param control_behavior LuaConstantCombinatorControlBehavior
-- @param group_key string?
-- @param parent ConstantC?
function SectionCC:new(control_behavior, group_key, parent)
  local obj = {
    _control  = control_behavior,
    group_key = group_key or "",
    storage   = {},
    _parent   = parent,
    _sections = {} -- –º–Ω–æ–∂–µ—Å—Ç–≤–æ real-—Å–µ–∫—Ü–∏–π
  }
  setmetatable(obj, SectionCC)
  return obj
end

--- –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
-- @param entry {name=string, min=number?, quality=string?, type=string?}
-- @return {name, quality, type, min} –∏–ª–∏ nil
function SectionCC:normalize(entry)
  if not entry.name then error("[SectionCC] 'name' must be set") end
  local min = entry.min or 0
  if type(min) ~= "number" then error("[SectionCC] 'min' must be a number") end
  local quality = entry.quality or qualities[1]
  local typ = get_type(entry.name, entry.type)
  if not typ then
    game.print("[SectionCC] unknown signal name: " .. tostring(entry.name))
    return nil
  end
  return { name = entry.name, quality = quality, type = typ, min = min }
end

--- –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –≤ storage (–∞–≥–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ø–æ —Å—É–º–º–µ min)
-- @param entries table[]
function SectionCC:add_signals(entries)
  for _, entry in ipairs(entries) do
    local norm = self:normalize(entry)
    if norm then
      add_signal_to_storage(self.storage, norm)
    end
  end
end

--- –°–æ–∑–¥–∞—ë—Ç real-—Å–µ–∫—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ—ë —Ñ–∏–ª—å—Ç—Ä—ã
function SectionCC:set_signals()
  local control = self._control
  if not control.valid then
    game.print("[SectionCC] combinator not valid")
    return
  end

  -- –°–æ–±–∏—Ä–∞–µ–º flat_signals –∏–∑ storage
  local flat_signals = {}
  for name, quals in pairs(self.storage) do
    for quality, types in pairs(quals) do
      for typ, sum_min in pairs(types) do
        table.insert(flat_signals, {
          value = { name = name, type = typ, quality = quality },
          min   = sum_min
        })
      end
    end
  end

  if #flat_signals == 0 then
    -- –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ–∫—Ü–∏—è –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
    return
  end

  local MAX_PER_SECTION = 1000
  local total = #flat_signals
  local i = 1

  -- ‚¨á –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ —Å—Ç–æ–∏—Ç –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ ‚¨á
  if self._section then
    local count = math.min(total, MAX_PER_SECTION)
    local slice = {}
    for j = 1, count do
      slice[j] = flat_signals[j]
    end
    self._section.filters = slice
    i = count + 1
  end

  -- ‚¨á –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ ‚¨á
  while i <= total do
    local slice = {}
    for j = i, math.min(i + MAX_PER_SECTION - 1, total) do
      slice[#slice + 1] = flat_signals[j]
    end

    local section
    -- –î–ª—è –Ω–æ–≤—ã—Ö —Å–µ–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è
    if self.group_key and #self._sections == 0 then
      section = control.add_section(self.group_key)
    else
      section = control.add_section()
    end

    section.filters = slice
    table.insert(self._sections, section)
    i = i + MAX_PER_SECTION
  end
end

--#endregion ‚ñ≤ SectionCC

--#region ‚ñº –ö–ª–∞—Å—Å ConstantC –∫–æ–Ω—Å—Ç–∞–Ω—Ç-–∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞

-- <–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û!> –ú–∞–∫—Å–∏–º—É–º —Å–µ–∫—Ü–∏–π 100 –µ–¥. –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–µ !!!

ConstantC = {}
ConstantC.__index = function(self, key)
  if ConstantC[key] then return ConstantC[key] end
  local beh = rawget(self, "_behavior")
  if beh and beh[key] then
    if type(beh[key]) == "function" then
      return function(tbl, ...) return beh[key](beh, ...) end
    else
      return beh[key]
    end
  end
  return nil
end

--- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ConstantC
-- @param obj LuaEntity
function ConstantC:new(obj)
  if not obj or type(obj.get_or_create_control_behavior) ~= "function" then
    error("[ConstantC] invalid object")
  end
  local behavior = obj:get_or_create_control_behavior()
  local self = {
    _behavior  = behavior,
    sections   = {},
    cc_storage = {}
  }
  setmetatable(self, ConstantC)
  return self
end

--- –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –≤ cc_storage (–∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ø–æ —Å—É–º–º–µ min)
-- @param entries table[] ‚Äî –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: {name=string, min=number?, quality=string?, type=string?}
function ConstantC:add_signals_to_cc_storage(entries)
  for _, entry in ipairs(entries) do
    if not entry.name then
      error("[ConstantC] 'name' must be set")
    end
    local min = entry.min or 0
    if type(min) ~= "number" then
      error("[ConstantC] 'min' must be a number")
    end
    local quality = entry.quality or qualities[1]
    local typ = get_type(entry.name, entry.type)
    if not typ then
      game.print("[ConstantC] unknown signal name: " .. tostring(entry.name))
    else
      add_signal_to_storage(self.cc_storage, {
        name = entry.name,
        quality = quality,
        type = typ,
        min = min
      })
    end
  end
end

--- –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é —Å—Ä–∞–∑—É –≤ –∏–≥—Ä–µ –∏ –≤ sections[]
-- @param group_key string?
-- @return SectionCC
function ConstantC:add_section(group_key)
  if not self._behavior.valid then
    game.print("[ConstantC] combinator not valid")
    return
  end
  local real
  if group_key and group_key ~= "" then
    real = self._behavior.add_section(group_key)
  else
    real = self._behavior.add_section()
  end
  local sc = SectionCC:new(self._behavior, group_key, self) -- ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º self –∫–∞–∫ parent
  rawset(sc, "_section", real)
  table.insert(self.sections, sc)
  return sc
end

--- –ö–æ–ø–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ cc_storage –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É –≤ target
-- @param filters table, –≥–¥–µ –∫–∞–∂–¥—ã–π filters[field] –º–æ–∂–µ—Ç –±—ã—Ç—å:
--    ‚Ä¢ nil ‚Äî –Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏ –±–µ–∑ –ø–æ—Ä—è–¥–∫–∞
--    ‚Ä¢ –º–Ω–æ–∂–µ—Å—Ç–≤–æ {[value]=true} ‚Äî —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–ª—é—á–∞–º, –±–µ–∑ –ø–æ—Ä—è–¥–∫–∞
--    ‚Ä¢ –º–∞—Å—Å–∏–≤ {"v1","v2",‚Ä¶} ‚Äî —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É –∏ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ
-- @param target SectionCC|string|string[] ‚Äî –∫—É–¥–∞ –∫–ª–∞—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ã
-- @return SectionCC[] ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∏–≤—à–∏—Ö—Å—è —Å–µ–∫—Ü–∏–π
function ConstantC:copy_filtered_signals(filters, target)
  -- 1) –ü–æ—Å—Ç—Ä–æ–∏—Ç—å include-–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ order-—Å–ø–∏—Å–∫–∏
  local include = {}
  local order   = {}
  for _, field in ipairs { "name", "quality", "type" } do
    local f = filters[field]
    if type(f) == "table" then
      if #f > 0 then
        -- –º–∞—Å—Å–∏–≤: —Ñ–∏–ª—å—Ç—Ä + –ø–æ—Ä—è–¥–æ–∫
        include[field] = {}
        for _, v in ipairs(f) do include[field][v] = true end
        order[field] = f
      else
        -- –º–Ω–æ–∂–µ—Å—Ç–≤–æ: —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä
        include[field] = f
      end
    end
  end

  -- 2) –°–æ–±—Ä–∞—Ç—å ¬´matched¬ª –≤ –≤–∏–¥–µ matched[name][quality][type] = sum
  local matched = {}
  for name, quals in pairs(self.cc_storage) do
    if not include.name or include.name[name] then
      for quality, types in pairs(quals) do
        if not include.quality or include.quality[quality] then
          for typ, sum_min in pairs(types) do
            if not include.type or include.type[typ] then
              matched[name]               = matched[name] or {}
              matched[name][quality]      = matched[name][quality] or {}
              matched[name][quality][typ] = sum_min
            end
          end
        end
      end
    end
  end
  if not next(matched) then return game.print("[ConstantC] copy_filtered_signals: nothing matched") and {} end
  -- if not next(matched) then error("copy_filtered_signals: nothing matched") end
  local result = {}

  -- 3a) –ï—Å–ª–∏ target ‚Äî SectionCC, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ storage
  if type(target) == "table" and type(target.add_signals) == "function" then
    for name, quals in pairs(matched) do
      for quality, types in pairs(quals) do
        for typ, sum_min in pairs(types) do
          target.storage[name]               = target.storage[name] or {}
          target.storage[name][quality]      = target.storage[name][quality] or {}
          target.storage[name][quality][typ] = sum_min
        end
      end
    end
    table.insert(result, target)
    return result
  end

  -- 3b) –ï—Å–ª–∏ target ‚Äî string, —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω—É –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º
  if type(target) == "string" then
    local sc = self:add_section(target)
    for name, quals in pairs(matched) do
      for quality, types in pairs(quals) do
        for typ, sum_min in pairs(types) do
          sc.storage[name]               = sc.storage[name] or {}
          sc.storage[name][quality]      = sc.storage[name][quality] or {}
          sc.storage[name][quality][typ] = sum_min
        end
      end
    end
    table.insert(result, sc)
    return result
  end

  -- 3c) –ï—Å–ª–∏ target ‚Äî array of strings, –∞–≤—Ç–æ-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º —ç—Ç–∏—Ö –ø–æ–ª–µ–π
  if type(target) == "table" then
    -- —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –º–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π
    local is_array = true
    for i = 1, #target do
      if type(target[i]) ~= "string" then
        is_array = false; break
      end
    end
    if is_array then
      -- 3c.1) —Å–æ–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ dims[field]=value
      local combos = {}
      local seen   = {}
      for name, quals in pairs(matched) do
        for quality, types in pairs(quals) do
          for typ, sum_min in pairs(types) do
            local dims = {}
            for _, field in ipairs(target) do
              if field == "name" then
                dims[field] = name
              elseif field == "quality" then
                dims[field] = quality
              else
                dims[field] = typ
              end
            end
            -- –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            local parts = {}
            for _, field in ipairs(target) do parts[#parts + 1] = dims[field] end
            local key = table.concat(parts, "|")
            if not seen[key] then
              seen[key]           = true
              combos[#combos + 1] = dims
            end
          end
        end
      end

      -- 3c.2) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å combos –ø–æ user-order
      table.sort(combos, function(a, b)
        for _, field in ipairs(target) do
          local va, vb = a[field], b[field]
          local ord    = order[field]
          if ord then
            -- –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã –≤ ord
            local ia, ib
            for idx, v in ipairs(ord) do
              if v == va then ia = idx end
              if v == vb then ib = idx end
            end
            if ia and ib and ia ~= ib then return ia < ib end
            if ia and not ib then return true end
            if ib and not ia then return false end
          end
          -- fallback: –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π
          if va ~= vb then return va < vb end
        end
        return false
      end)

      -- 3c.3) —Å–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é –Ω–∞ –∫–∞–∂–¥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç—É–¥–∞ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
      for _, dims in ipairs(combos) do
        local sc = self:add_section("")
        result[#result + 1] = sc
        for name, quals in pairs(matched) do
          for quality, types in pairs(quals) do
            for typ, sum_min in pairs(types) do
              local ok = true
              for _, field in ipairs(target) do
                local val = (field == "name" and name)
                    or (field == "quality" and quality)
                    or typ
                if dims[field] ~= val then
                  ok = false; break
                end
              end
              if ok then
                sc.storage[name]               = sc.storage[name] or {}
                sc.storage[name][quality]      = sc.storage[name][quality] or {}
                sc.storage[name][quality][typ] = sum_min
              end
            end
          end
        end
      end

      return result
    end
  end

  error("copy_filtered_signals: invalid target")
end

--- –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ cc_storage –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
-- @param filters { name=table?, quality=table?, type=table? }  ‚Äî nil-–ø–æ–ª—è –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç
-- @param delta   number|function(old_value)->new_value
function ConstantC:update_cc_storage(filters, delta)
  for name, quals in pairs(self.cc_storage) do
    if not filters.name or filters.name[name] then
      for quality, types in pairs(quals) do
        if not filters.quality or filters.quality[quality] then
          for typ, old in pairs(types) do
            if not filters.type or filters.type[typ] then
              local new
              if type(delta) == "function" then
                new = delta(old)
              else
                new = old + delta
              end
              self.cc_storage[name][quality][typ] = new
            end
          end
        end
      end
    end
  end
end

--- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ –≤—Å–µ —Å–µ–∫—Ü–∏–∏
function ConstantC:set_all_signals()
  for _, section in ipairs(self.sections) do
    section:set_signals()
  end
end

--- –ü–æ–æ—á–µ—Ä—ë–¥–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç fn –∫ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞–º cc_storage,
--- —Ä–∞–∑–±–∏–≤–∞—è –ø–æ –∫–∞–∂–¥–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ —Ñ–∏–ª—å—Ç—Ä–µ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –∑–∞–¥–∞–Ω–æ –≤ literal.
--- –ï—Å–ª–∏ filter –ø—É—Å—Ç–æ–π (`{}`), —Ç–æ fn –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ cc_storage.
-- @param filter table, –≥–¥–µ filter[field] –º–æ–∂–µ—Ç –±—ã—Ç—å:
--    ‚Ä¢ –º–∞—Å—Å–∏–≤ {"v1","v2",‚Ä¶} ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
--    ‚Ä¢ –º–Ω–æ–∂–µ—Å—Ç–≤–æ {[v1]=true, ‚Ä¶} ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ—Ä—è–¥–∫–∞
-- @param fn     function(old)->new
function ConstantC:update_by_filter(filter, fn)
  -- –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—É—Å—Ç ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë cc_storage
  if not next(filter) then
    self:update_cc_storage({}, fn)
    return
  end

  for field, values in pairs(filter) do
    local list = {}
    if type(values) == "table" and #values > 0 then
      for _, v in ipairs(values) do
        list[#list + 1] = v
      end
    elseif type(values) == "table" then
      for v in pairs(values) do
        list[#list + 1] = v
      end
    else
      error("update_by_filter: filter[" .. tostring(field) .. "] must be a table")
    end

    for _, val in ipairs(list) do
      self:update_cc_storage({ [field] = { [val] = true } }, fn)
    end
  end
end

--- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç cc_storage –≤ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
-- @return table[] ‚Äî –º–∞—Å—Å–∏–≤ { name=string, quality=string, type=string, min=number }
function ConstantC:get_cc_storage()
  local result = {}
  for name, qualities in pairs(self.cc_storage) do
    for quality, types in pairs(qualities) do
      for typ, min in pairs(types) do
        table.insert(result, {
          name    = name,
          quality = quality,
          type    = typ,
          min     = min
        })
      end
    end
  end
  return result
end

--#endregion ‚ñ≤ ConstantC

--#region ‚ñº SectionRC: –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Å—É–Ω–¥—É–∫–∞ –∑–∞–ø—Ä–æ—Å–∞

local SectionRC = {}
SectionRC.__index = SectionRC

--- –°–æ–∑–¥–∞—ë—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞
-- @param group_key string ‚Äî –∏–º—è —Å–µ–∫—Ü–∏–∏ (section.group)
-- @param opts table?
--    chest_mod boolean ‚Äî —Å–ø–µ—Ü. —Ä–µ–∂–∏–º (–∑–∞–≥–ª—É—à–∫–∞), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
--    multiplier number ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–µ–∫—Ü–∏–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0
--    active boolean ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ (section.active), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
function SectionRC:new(group_key, opts)
  opts = opts or {}
  local obj = {
    group_key  = group_key or "",
    chest_mod  = opts.chest_mod or false,
    multiplier = opts.multiplier or 1.0,
    active     = opts.active == nil and true or opts.active,
    storage    = {} -- signals[name][type][comparator][quality] = { min, max, is_set_max }
  }
  setmetatable(obj, SectionRC)
  return obj
end

--- –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–∫—Ü–∏–∏
-- @param entry table { name, type?, comparator?, quality?, min?, max?, set_max? }
-- @return table|nil –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ nil –ø—Ä–∏ –æ—à–∏–±–∫–µ
function SectionRC:normalize(entry)
  if not entry.name then error("[SectionRC] 'name' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω") end
  local name = entry.name
  local typ  = get_type(name, entry.type)
  if not typ then
    game.print("[SectionRC] –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è '" .. name .. "', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    return nil
  end
  if typ ~= "item" then
    game.print("[SectionRC] warning: —Ç–∏–ø '" .. typ .. "' –Ω–µ 'item' –¥–ª—è —Å—É–Ω–¥—É–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
  end
  local cmp = entry.comparator or "="
  local allowed = { ["="] = true, ["‚â†"] = true, [">"] = true, ["<"] = true, ["‚â•"] = true, ["‚â§"] = true, ["any"] = true }
  if not allowed[cmp] then cmp = "=" end
  local qual       = entry.quality or qualities[1]
  local mn         = entry.min or 0
  local is_set_max = entry.set_max ~= nil
  local mx
  if is_set_max then
    mx = entry.set_max
  else
    if entry.max == nil or entry.max == "inf" then
      mx = math.huge
    else
      mx = entry.max
    end
  end

  return {
    name       = name,
    type       = typ,
    comparator = cmp,
    quality    = qual,
    min        = mn,
    max        = mx,
    is_set_max = is_set_max
  }
end

--- –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ storage
-- @param entry table –≤—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è normalize
function SectionRC:add_signal(entry)
  if self.chest_mod then
    game.print("[SectionRC] chest_mod —Ä–µ–∂–∏–º –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –∑–∞–≥–ª—É—à–∫–∞")
  end
  local norm = self:normalize(entry)
  if not norm then return end

  local n, t, c, q, mn, mx = norm.name, norm.type, norm.comparator, norm.quality, norm.min, norm.max
  self.storage[n]          = self.storage[n] or {}
  self.storage[n][t]       = self.storage[n][t] or {}
  self.storage[n][t][c]    = self.storage[n][t][c] or {}
  local qmap               = self.storage[n][t][c]

  local old                = qmap[q]
  if not old then
    qmap[q] = { min = mn, max = mx, is_set_max = norm.is_set_max }
  else
    old.min = old.min + mn
    if norm.is_set_max then
      old.max = mx
      old.is_set_max = true
    else
      if old.max == math.huge or mx == math.huge then
        old.max = math.huge
      else
        old.max = old.max + mx
      end
    end
  end
end

--- –§–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è LuaLogisticSection.filters
-- @return table[] —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function SectionRC:prepare_export()
  local out = {}
  for name, typmap in pairs(self.storage) do
    for typ, cmpmap in pairs(typmap) do
      for cmp, qmap in pairs(cmpmap) do
        for qual, data in pairs(qmap) do
          -- —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
          local value = { name = name, type = typ }

          -- –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∑–Ω–∞–∫ –≤–Ω—É—Ç—Ä—å value, –µ—Å–ª–∏ –Ω–µ "any"
          if cmp ~= "any" then
            value.quality    = qual
            value.comparator = cmp
          end

          -- —Å–æ–∑–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä —Å min/max
          local filter = {
            value = value,
            min   = data.min
          }
          if data.max and data.max < math.huge then
            filter.max = data.max
          end

          table.insert(out, filter)
        end
      end
    end
  end
  return out
end

--- –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ç—É –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –ø—É–Ω–∫—Ç—É
-- @param point LuaLogisticPoint ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç entity:get_requester_point()
function SectionRC:apply_to_point(point)
  local real      = point.add_section(self.group_key or "")
  real.multiplier = self.multiplier or 1.0
  real.active     = (self.active == nil) and true or self.active
  real.filters    = self:prepare_export()
  return real
end

--#endregion ‚ñ≤ SectionRC

--#region ‚ñº RequestC: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ requester logistic-container

local RequestC = {}
RequestC.__index = RequestC

--- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä RequestC
-- @param entity LuaEntity ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å logistic-container mode="requester"
-- @param take boolean? ‚Äî true = –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏; false = —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ <...>
function RequestC:new(entity, take)
  if not entity or not entity.valid then
    error("[RequestC] –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π entity")
  end
  if entity.prototype.logistic_mode ~= "requester" then
    error("[RequestC] entity –Ω–µ —è–≤–ª—è–µ—Ç—Å—è requester logistic-container")
  end
  local point = entity.get_requester_point and entity:get_requester_point()
  if not point or not point.valid then
    error("[RequestC] –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å logistic_point")
  end

  local obj = { entity = entity, point = point, sections = {} }
  setmetatable(obj, RequestC)

  -- –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–∫—Ü–∏–π
  for _, sec in ipairs(point.sections) do
    if take or (sec.group and sec.group:match("^<.+>$")) then
      local sc = SectionRC:new(sec.group, {
        chest_mod  = false,
        multiplier = sec.multiplier or 1.0,
        active     = sec.active
      })
      for _, f in ipairs(sec.filters) do
        sc:add_signal {
          name       = f.value.name,
          type       = f.value.type,
          comparator = f.comparator,
          quality    = f.value.quality,
          min        = f.min,
          max        = f.max or "inf"
        }
      end
      table.insert(obj.sections, sc)
    end
  end

  return obj
end

--- –Ø–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
-- @param group_key string ‚Äî –∏–º—è —Å–µ–∫—Ü–∏–∏
-- @param opts table? ‚Äî –æ–ø—Ü–∏–∏ chest_mod, multiplier, active
function RequestC:add_section(group_key, opts)
  local sc = SectionRC:new(group_key, opts)
  table.insert(self.sections, sc)
  return sc
end

--- –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∏ –∏—Ö —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å—É–Ω–¥—É–∫
--  –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ –ø–æ apply_to_point,
--  –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Å–µ–∫—Ü–∏–π.
function RequestC:apply()
  for i = #self.point.sections, 1, -1 do
    self.point.remove_section(i)
  end
  for _, sc in ipairs(self.sections) do
    sc:apply_to_point(self.point)
  end
  self.sections = {}
end

--#endregion ‚ñ≤ RequestC


local function main()
  --#region ‚ñº –í—ã–∑–æ–≤—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  if area == nil then
    area = { { 0, 0 }, { 100, 100 } }
  end

  area = area

  qualities = {} -- ‚òÜ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—á–µ—Å—Ç–≤ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
  for _, proto in pairs(prototypes.quality) do
    if proto.hidden == false then
      table.insert(qualities, proto.name)
    end
  end

  global_recipe_table = global_recipe_filtered()
  global_resource_table = global_item_or_fluid_filtered()

  --#endregion ‚ñ≤ –í—ã–∑–æ–≤—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  --#region ‚ñº‚ñº –¢–µ—Å—Ç ? - ...
  --#endregion ‚ñ≤‚ñ≤ –¢–µ—Å—Ç ? - ...

  local usefull_recipes = Set.I(global_recipe_table.usefull_recipes, global_recipe_table.machines
    ["assembling-machine-3"], global_recipe_table.recipes_with_main)


  local offset_hight = 10 ^ 6     -- –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞ –æ—Ç—Å—á–µ—Ç–∞

  local offset_low = 0            -- –ù–∏–∂–Ω—è—è —Ç–æ—á–∫–∞ –æ—Ç—Å—á–µ—Ç–∞

  local block_count = -5 * 10 ^ 6 -- –£—Å–ª–æ–≤–Ω–æ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

  -- –°–ø–∏—Å–∫–∏ –ò, –ò–ü, –ü
  local classify_ingredients = get_classify_ingredients(usefull_recipes)

  --#region ‚ñº DC —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ-–∞—Å—Å–µ–º–±–ª–µ—Ä–æ–º

  --#region ‚ñº‚ñº DeciderCombinator

  local function process_dc_multi_RS_trigger_max(dc_multi_RS_trigger_max)
    -- –ü—Ä–æ–ø—É—Å–∫–∞—é—â–µ–µ —Å. liquid –µ—Å–ª–∏ –Ω–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∂–∏–¥–∫–æ—Å—Ç—å –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    local other_fluids_conditions = { "and" }
    table.insert(other_fluids_conditions, {
      first_signal = { name = "signal-each" },
      second_signal = { name = "signal-liquid", quality = qualities[#qualities], type = "virtual" }
    })
    for _, other_fluid in pairs(global_resource_table.all_fluids) do
      table.insert(other_fluids_conditions, {
        first_signal = { name = other_fluid.name, quality = qualities[#qualities], type = "fluid" },
        comparator = "=",
        constant = 0,
        first_signal_networks = { red = false, green = true }
      })
    end
    dc_multi_RS_trigger_max:add_expr(other_fluids_conditions)

    -- –ü—Ä–æ–ø—É—Å–∫–∞—é—â–µ–µ —Å. B –µ—Å–ª–∏ –Ω–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç –æ–ø—Ä–æ–∂–Ω–µ–Ω–∏—è –±–æ—á–∫–∏
    local other_empty_barrel_recipes = { "and" }
    table.insert(other_empty_barrel_recipes, {
      first_signal = { name = "signal-each" },
      second_signal = { name = "signal-B", quality = qualities[#qualities], type = "virtual" }
    })
    for _, other_empty_barrel_recipe in pairs(global_recipe_table.empty_barrel) do
      table.insert(other_empty_barrel_recipes, {
        first_signal = { name = other_empty_barrel_recipe.name, quality = qualities[1], type = "recipe" },
        comparator = "=",
        constant = offset_low,
        first_signal_networks = { red = false, green = true }
      })
    end
    dc_multi_RS_trigger_max:add_expr(other_empty_barrel_recipes)

    -- -- –ü—Ä–æ–ø—É—Å–∫–∞—é—â–µ–µ —Å. –∫–æ–Ω—Å—Ç–∞–Ω—Ç -1 * offset01 —Å –∫—Ä–∞—Å–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–¥–∞
    -- local all_signals_offset = AND({
    --   first_signal = { name = "signal-each" },
    --   constant = -1 * offset01
    -- })
    -- dc_multi_RS_trigger_max:add_expr(all_signals_offset)

    -- -- –ü—Ä–æ–ø—É—Å–∫–∞—é—â–µ–µ —Å. F –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç -1 * offset01 —Å –∫—Ä–∞—Å–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–¥–∞
    -- local all_signals_F_count = AND({
    --   first_signal = { name = "signal-each" },
    --   second_signal = { name = "signal-F", type = "virtual" }
    -- })
    -- dc_multi_RS_trigger_max:add_expr(all_signals_F_count)

    for recipe_name, recipe in pairs(usefull_recipes) do
      local recipe_signal = { name = recipe_name, quality = qualities[1], type = "recipe" }
      local fluid_data = extract_fluid_data(recipe)

      local recipe_out = {
        first_signal  = { name = "signal-each" },
        second_signal = recipe_signal
      }

      local recipe_offset = {
        first_signal          = recipe_signal,
        comparator            = ">",
        constant              = offset_hight,
        first_signal_networks = { red = false, green = true }
      }

      local filter_max_recipe = {
        first_signal           = { name = "signal-everything", type = "virtual" },
        second_signal          = recipe_signal,
        comparator             = "‚â§",
        first_signal_networks  = { red = false, green = true },
        second_signal_networks = { red = true, green = false }
      }

      local lock_active_recipe = {
        first_signal          = { name = "signal-everything", type = "virtual" },
        constant              = offset_hight / 2 - 1,
        comparator            = "<",
        first_signal_networks = { red = false, green = true }
      }

      local ingredients = { "or" }
      for _, ing_variant in ipairs(get_alternative_ingredient_variants(recipe)) do
        local and_group = { "and" }
        for _, ing in ipairs(ing_variant) do
          local amount            = ing.amount or 1
          local signal            = { name = ing.name, quality = qualities[1], type = ing.type }
          local networks          = (ing.type == "fluid") and { red = true, green = true } or
              { red = false, green = true }

          local offset_multiplier = (ing.type == "fluid") and -2 or -1
          local constant          = offset_multiplier * offset_low + amount

          table.insert(and_group, {
            first_signal          = signal,
            comparator            = "‚â•",
            constant              = constant,
            first_signal_networks = networks
          })
        end
        table.insert(ingredients, and_group)
      end

      local check_F = {
        first_signal          = { name = "signal-F", type = "virtual" },
        constant              = 3,
        comparator            = "=",
        first_signal_networks = { red = false, green = true }
      }

      local fluids_d4 = { "or" }
      local fluids_d5 = { "or" }
      for _, fluid_name in ipairs(fluid_data.ingredients) do
        local fluid_signal = { name = fluid_name, quality = qualities[#qualities], type = "fluid" }

        table.insert(fluids_d4, AND(
          { first_signal = { name = "signal-each" }, second_signal = fluid_signal },
          check_F,
          recipe_offset
        ))

        local fluid_offset = {
          first_signal          = fluid_signal,
          comparator            = ">",
          constant              = 0,
          first_signal_networks = { red = false, green = true }
        }
        local other_fluids_conditions = { "and" }
        for _, other in pairs(global_resource_table.all_fluids) do
          if other.name ~= fluid_name then
            table.insert(other_fluids_conditions, {
              first_signal          = { name = other.name, quality = qualities[#qualities], type = "fluid" },
              comparator            = "=",
              constant              = 0,
              first_signal_networks = { red = false, green = true }
            })
          end
        end
        table.insert(fluids_d5, AND(
          { first_signal = { name = "signal-each" }, second_signal = fluid_signal },
          fluid_offset,
          other_fluids_conditions
        ))
      end

      local empty_barrel_d4 = { "or" }
      local empty_barrel_d5 = { "or" }
      for _, fluid_name in ipairs(fluid_data.ingredients) do
        local barrel = get_barrel_recipes_for_fluid(fluid_name)
        if barrel and barrel.empty_barrel_recipe then
          local barrel_signal = {
            name    = barrel.empty_barrel_recipe,
            quality = qualities[1],
            type    = "recipe"
          }

          table.insert(empty_barrel_d4, AND(
            { first_signal = { name = "signal-each" }, second_signal = barrel_signal },
            check_F,
            recipe_offset
          ))

          local barrel_offset = {
            first_signal          = barrel_signal,
            comparator            = ">",
            constant              = offset_low,
            first_signal_networks = { red = false, green = true }
          }
          local other_barrels = { "and" }
          for _, other in pairs(global_recipe_table.empty_barrel) do
            if other.name ~= barrel.empty_barrel_recipe then
              table.insert(other_barrels, {
                first_signal          = { name = other.name, quality = qualities[1], type = "recipe" },
                comparator            = "=",
                constant              = offset_low,
                first_signal_networks = { red = false, green = true }
              })
            end
          end
          table.insert(empty_barrel_d5, AND(
            { first_signal = { name = "signal-each" }, second_signal = barrel_signal },
            barrel_offset,
            other_barrels
          ))
        end
      end

      local d1 = AND(recipe_out, ingredients, lock_active_recipe)
      local d2 = AND(recipe_out, ingredients, recipe_offset, filter_max_recipe)
      -- local d3 = AND(recipe_out, ingredients, recipe_offset, check_F)
      local d3 = AND(recipe_out, ingredients, recipe_offset)

      -- local expr = OR(
      --   d1, d2, d3,
      --   fluids_d4, fluids_d5,
      --   empty_barrel_d4, empty_barrel_d5
      -- )

      local expr = OR(
        d1, d2, d3
      )

      dc_multi_RS_trigger_max:add_expr(expr)
    end

    local outputs = {
      {
        signal = { name = "signal-each", type = "virtual" },
        networks = { red = true, green = false }
      },
      {
        signal = { name = "signal-F", type = "virtual" },
        copy_count_from_input = false
      }
    }

    dc_multi_RS_trigger_max:apply_settings(outputs)
  end

  local found = findSpecialEntity("<dc_multi_RS_trigger_max>", { name = { "decider-combinator" } })
  if #found ~= 0 then
    local dc_multi_RS_trigger_max = DeciderC:new(found[1])
    process_dc_multi_RS_trigger_max(dc_multi_RS_trigger_max)
  end

  --#endregion ‚ñ≤‚ñ≤ DeciderCombinator

  --#region ‚ñº‚ñº ConstantCombinator

  local function process_recipes_for_assembling_machine_2(cc)
    local index = Upd.count(1, 1)
    local index_section = cc:add_section("")
    local constant_section = cc:add_section("")
    for recipe_name, _ in pairs(usefull_recipes) do
      index_section:add_signals({ { name = recipe_name, quality = qualities[1], type = "recipe", min = index() } })
      constant_section:add_signals({ { name = recipe_name, quality = qualities[1], type = "recipe", min = offset_hight } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<recipes_for_assembling-machine-2>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_recipes_for_assembling_machine_2(ConstantC:new(found[1]))
  end

  local function process_all_resource_and_empty_barrel_recipes(cc)
    local all_items_section = cc:add_section("")
    for item_name, _ in pairs(global_resource_table.all_items) do
      all_items_section:add_signals({ { name = item_name, quality = qualities[1], min = block_count } })
    end
    local all_fluids_section = cc:add_section("")
    for fluid_name, _ in pairs(global_resource_table.all_fluids) do
      all_fluids_section:add_signals({ { name = fluid_name, quality = qualities[1], min = block_count } })
    end
    local recipes_empty_barrel_section = cc:add_section("")
    for recipe_empty_barrel_name, _ in pairs(global_recipe_table.empty_barrel) do
      recipes_empty_barrel_section:add_signals({ { name = recipe_empty_barrel_name, quality = qualities[1], type = "recipe", min = block_count } })
    end
    local recipes_section = cc:add_section("")
    local ban_recipes_am = Set.D(global_recipe_table.all_assembling_recipes,
      global_recipe_table.machines["assembling-machine-3"])
    for recipe_name, _ in pairs(ban_recipes_am) do
      recipes_section:add_signals({ { name = recipe_name, quality = qualities[1], type = "recipe", min = block_count } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<all_resource_and_empty_barrel_recipes>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_all_resource_and_empty_barrel_recipes(ConstantC:new(found[1]))
  end

  local function process_all_resource_limit(cc)
    local all_resource_am = Set.U(classify_ingredients.exclusively_ingredients,
      classify_ingredients.ingredients_and_products, classify_ingredients.exclusively_products)
    local section = cc:add_section("")
    for resource_name, _ in pairs(all_resource_am) do
      section:add_signals({ { name = resource_name, quality = qualities[1], min = -2 ^ 31 } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<all_resource_limit>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_all_resource_limit(ConstantC:new(found[1]))
  end

  local function process_pure_ingredients(cc)
    local section = cc:add_section("")
    for ingredient_name, _ in pairs(classify_ingredients.exclusively_ingredients) do
      section:add_signals({ { name = ingredient_name, quality = qualities[1], min = -1 * get_stack_size(ingredient_name) } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<pure_ingredients>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_pure_ingredients(ConstantC:new(found[1]))
  end

  local function process_ingredients_and_products(cc)
    local section = cc:add_section("")
    for ingorprod_name, _ in pairs(classify_ingredients.ingredients_and_products) do
      section:add_signals({ { name = ingorprod_name, quality = qualities[1], type = "item", min = -1 * get_stack_size(ingorprod_name) } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<ingredients_and_products>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_ingredients_and_products(ConstantC:new(found[1]))
  end

  local function process_request_for_am2(cc)
    local ingorprod_section = cc:add_section("")
    local product_section = cc:add_section("")
    for ingorprod_name, _ in pairs(classify_ingredients.ingredients_and_products) do
      ingorprod_section:add_signals({ { name = ingorprod_name, quality = qualities[1], type = "item", min = -1 * get_stack_size(ingorprod_name) } })
    end
    for product_name, _ in pairs(classify_ingredients.exclusively_products) do
      product_section:add_signals({ { name = product_name, quality = qualities[1], type = "item", min = -1 * get_stack_size(product_name) } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<request_for_am2>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_request_for_am2(ConstantC:new(found[1]))
  end

  --#region ‚ñº‚ñº‚ñº –ë–∞–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤ (–∫—Ä–∞—Å–Ω—ã–π –ø—Ä–æ–≤–æ–¥ - —Ä—è–¥—ã)

  -- –ë–ª–æ–∫ –±–∞–Ω–æ–≤ –≤—Å–µ–≥–æ —á—Ç–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –º–∞—à–∏–Ω—ã
  local function process_all_ban_resource_and_empty_barrel_recipes(cc)
    local all_items_section = cc:add_section("")
    for item_name, _ in pairs(global_resource_table.all_items) do
      all_items_section:add_signals({ { name = item_name, quality = qualities[1], min = block_count } })
    end

    local all_fluids_section = cc:add_section("")
    for fluid_name, _ in pairs(global_resource_table.all_fluids) do
      all_fluids_section:add_signals({ { name = fluid_name, quality = qualities[1], min = block_count } })
    end

    local barrel_recipe_section = cc:add_section("")
    local barrel_recipes = Set.U(global_recipe_table.fill_barrel, global_recipe_table.empty_barrel)
    for barrel_recipe_name, _ in pairs(barrel_recipes) do
      barrel_recipe_section:add_signals({ { name = barrel_recipe_name, quality = qualities[1], type = "recipe", min = block_count } })
    end

    cc:set_all_signals()
  end

  local found = findSpecialEntity("<all_ban_resource_and_empty_barrel_recipes>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_all_ban_resource_and_empty_barrel_recipes(ConstantC:new(found[1]))
  end

  -- –ë–ª–æ–∫ –±–∞–Ω–æ–≤ –≤—Å–µ–≥–æ —á—Ç–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º –º–∞—à–∏–Ω—ã —Å–Ω–∞–±–∂–µ–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç—è–º–∏
  local function process_all_ban_resource_and_recipes(cc)
    local all_items_section = cc:add_section("")
    for item_name, _ in pairs(global_resource_table.all_items) do
      all_items_section:add_signals({ { name = item_name, quality = qualities[1], min = block_count } })
    end

    local all_fluids_section = cc:add_section("")
    for fluid_name, _ in pairs(global_resource_table.all_fluids) do
      all_fluids_section:add_signals({ { name = fluid_name, quality = qualities[1], min = block_count } })
    end

    local ban_recipes_section = cc:add_section("")
    local non_barrel_am3_recipes = Set.D(global_recipe_table.machines["assembling-machine-3"],
      global_recipe_table.empty_barrel)
    for recipe_name, _ in pairs(non_barrel_am3_recipes) do
      ban_recipes_section:add_signals({ { name = recipe_name, quality = qualities[1], type = "recipe", min = block_count } })
    end

    cc:set_all_signals()
  end

  local found = findSpecialEntity("<all_ban_resource_and_recipes>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_all_ban_resource_and_recipes(ConstantC:new(found[1]))
  end

  --#endregion ‚ñ≤‚ñ≤‚ñ≤ –ë–∞–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤ (–∫—Ä–∞—Å–Ω—ã–π –ø—Ä–æ–≤–æ–¥ - —Ä—è–¥—ã)

  --#region ‚ñº‚ñº‚ñº –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã

  -- –õ–∏–º–∏—Ç –ø–æ—Å—Ç–∞–∫–∏ –±–æ—á–µ–∫ —Å –∂–∏–¥–∫–æ—Å—Ç—è–º–∏ –ø–æ –∂–∏–¥–∫–æ—Å—Ç–∏
  local function process_max_liquid_buffer(cc)
    local fluids_max_limit_section = cc:add_section("")
    for fluid_name, _ in pairs(global_resource_table.all_fluids) do
      fluids_max_limit_section:add_signals({ { name = fluid_name, quality = qualities[1], min = -1 * 40 } })
    end

    local all_fluids_section = cc:add_section("")
    for fluid_name, _ in pairs(global_resource_table.all_fluids) do
      all_fluids_section:add_signals({ { name = fluid_name, quality = qualities[1], min = 2 ^ 31 - 1 } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<max_liquid_buffer>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_max_liquid_buffer(ConstantC:new(found[1]))
  end

  -- –ò–Ω–¥–µ–∫—Å—ã –∂–∏–¥–∫–æ—Å—Ç–µ–π (–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ) –∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –æ–ø—Ä–æ–∂–Ω–µ–Ω–∏—è –±–æ—á–µ–∫
  local function process_all_index_fluid_recipes(cc)
    local index = Upd.count(10, 10)
    local index_fluid_recipes_section = cc:add_section("")
    index_fluid_recipes_section:add_signals({ { name = "signal-liquid", quality = qualities[#qualities], type = "virtual", min = index() } })
    local constant_fluid_recipes_section = cc:add_section("")
    constant_fluid_recipes_section:add_signals({ { name = "signal-liquid", quality = qualities[#qualities], type = "virtual", min = offset_hight / 10 } })
    for fluid_name, _ in pairs(global_resource_table.all_fluids) do
      index_fluid_recipes_section:add_signals({ { name = fluid_name, quality = qualities[#qualities], min = index() } })
      constant_fluid_recipes_section:add_signals({ { name = fluid_name, quality = qualities[#qualities], min = offset_hight / 10 } })
    end

    local index = Upd.count(10, 10)
    local index_empty_barrel_recipes_section = cc:add_section("")
    index_empty_barrel_recipes_section:add_signals({ { name = "signal-B", type = "virtual", quality = qualities[#qualities], min = index() } })
    local constant_empty_barrel_recipes_section = cc:add_section("")
    constant_empty_barrel_recipes_section:add_signals({ { name = "signal-B", type = "virtual", quality = qualities[#qualities], min = offset_hight / 5 } })
    for fluid_name, _ in pairs(global_recipe_table.empty_barrel) do
      index_empty_barrel_recipes_section:add_signals({ { name = fluid_name, type = "recipe", min = index() } })
      constant_empty_barrel_recipes_section:add_signals({ { name = fluid_name, type = "recipe", min = offset_hight / 5 } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<all_index_fluid_recipes>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_all_index_fluid_recipes(ConstantC:new(found[1]))
  end

  -- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–∞–∫–µ—Ç—ã —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å
  local function process_request_min_rocket_capacity(cc)
    local section = cc:add_section("")
    for item_name, _ in pairs(global_resource_table.all_items) do
      section:add_signals({ { name = item_name, quality = qualities[1], min = -1 * get_min_rocket_stack_size(item_name) } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<request_min_rocket_capacity>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_request_min_rocket_capacity(ConstantC:new(found[1]))
  end
  --#endregion ‚ñ≤‚ñ≤‚ñ≤ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã

  --#endregion ‚ñ≤‚ñ≤ ConstantCombinator

  --#endregion ‚ñ≤ DC —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ-–∞—Å—Å–µ–º–±–ª–µ—Ä–æ–º

  --#region ‚ñº DeciderCombinator + ConstantCombinator —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ

  local function process_swap_item_recipe(dc)
    for recipe_name, recipe in pairs(usefull_recipes) do
      local recipe_signal = { name = recipe_name, quality = qualities[1], type = "recipe" }
      local main_product_signal = {
        name = recipe.main_product.name,
        quality = qualities[1],
        type = recipe.main_product.type
      }

      local recipe_out = { first_signal = { name = "signal-each" }, second_signal = recipe_signal }

      local main_product = {
        first_signal = main_product_signal,
        constant = 0,
        comparator = "<",
        first_signal_networks = { red = false, green = true },
      }

      local expr = AND(recipe_out, main_product)
      dc:add_expr(expr)
    end
    dc:apply_settings()
  end

  local found = findSpecialEntity("<swap_item_recipe>", { name = { "decider-combinator" } })
  if #found ~= 0 then
    process_swap_item_recipe(DeciderC:new(found[1]))
  end

  local function process_easy_distribution(dc)
    for recipe_name, recipe in pairs(usefull_recipes) do
      local recipe_signal = { name = recipe_name, quality = qualities[1], type = "recipe" }
      local main_product_signal = {
        name = recipe.main_product.name,
        quality = qualities[1],
        type = recipe.main_product.type
      }

      local ingredients = { "or" }
      for _, ingredient in ipairs(recipe.ingredients) do
        local ingredient_signal = { name = ingredient.name, quality = qualities[1], type = ingredient.type }
        local entry = { first_signal = { name = "signal-each" }, second_signal = ingredient_signal }
        table.insert(ingredients, entry)
      end

      local recipe_out = { first_signal = { name = "signal-each" }, second_signal = recipe_signal }

      local check_recipe = {
        first_signal = main_product_signal,
        constant = 0,
        comparator = ">",
        first_signal_networks = { red = false, green = true },
      }

      local expr1 = AND(ingredients, AND(check_recipe))
      dc:add_expr(expr1)

      local expr2 = AND(recipe_out, check_recipe)
      dc:add_expr(expr2)
    end
    dc:apply_settings()
  end

  local found = findSpecialEntity("<easy_distribution>", { name = { "decider-combinator" } })
  if #found ~= 0 then
    process_easy_distribution(DeciderC:new(found[1]))
  end

  local function process_index_list_of_ingredients(cc)
    local index = Upd.count(1, 1)
    local section1 = cc:add_section("")
    for ingredient_name, _ in pairs(classify_ingredients.exclusively_ingredients) do
      section1:add_signals({ { name = ingredient_name, quality = qualities[1], min = index() } })
    end
    local section2 = cc:add_section("")
    for ingorprod_name, _ in pairs(classify_ingredients.ingredients_and_products) do
      section2:add_signals({ { name = ingorprod_name, quality = qualities[1], min = index() } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<index_list_of_ingredients>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_index_list_of_ingredients(ConstantC:new(found[1]))
  end

  local function process_am2_priority_recipes(cc)
    local section1 = cc:add_section("")
    local index = Upd.count(100, 100)
    local section2 = cc:add_section("")
    local recipe_rating_list, recipe_rating_table = get_recipe_rating(usefull_recipes, true)
    for _, recipe_name in ipairs(recipe_rating_list) do
      local score = recipe_rating_table[recipe_name]
      section1:add_signals({ { name = recipe_name, quality = qualities[1], type = "recipe", min = score } })
      section2:add_signals({ { name = recipe_name, quality = qualities[1], type = "recipe", min = index() } })
    end
    cc:set_all_signals()
  end

  local found = findSpecialEntity("<am2_priority_recipes>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_am2_priority_recipes(ConstantC:new(found[1]))
  end

  -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É usefull_recipes
  local function process_am2_priority_main_product(cc)
    -- —Å–æ–∑–¥–∞—ë–º –¥–≤–µ —Å–µ–∫—Ü–∏–∏: –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –¥–ª—è —à–∞–≥–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    local section1                   = cc:add_section("")  -- —Å–µ–∫—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    local index                      = Upd.count(100, 100) -- –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 100, 200, 300, ‚Ä¶
    local section2                   = cc:add_section("")  -- —Å–µ–∫—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤

    -- –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Å–∞–º—É —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    local recipe_list, recipe_scores = get_recipe_rating(usefull_recipes, true)

    -- —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    local seen_products              = {}

    for _, recipe_name in ipairs(recipe_list) do
      local recipe = usefull_recipes[recipe_name]
      local prod   = recipe.main_product
      local pname  = prod.name
      local ptype  = prod.type

      if not seen_products[pname] then
        local score = recipe_scores[recipe_name]

        -- —Å–µ–∫—Ü–∏—è 1: —Å–∏–≥–Ω–∞–ª –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å min = —Ä–µ–π—Ç–∏–Ω–≥
        section1:add_signals({ {
          name    = pname,
          quality = qualities[1],
          type    = ptype,
          min     = score
        } })

        -- —Å–µ–∫—Ü–∏—è 2: —Å–∏–≥–Ω–∞–ª –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å min = —à–∞–≥–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        section2:add_signals({ {
          name    = pname,
          quality = qualities[1],
          type    = ptype,
          min     = index()
        } })

        seen_products[pname] = true
      end
    end

    -- –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç-–∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä—É
    cc:set_all_signals()
  end

  -- –∏—â–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç-–∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä —Å –º–µ—Ç–∫–æ–π <am2_priority_main_product> –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  local found = findSpecialEntity("<am2_priority_main_product>", { name = { "constant-combinator" } })
  if #found ~= 0 then
    process_am2_priority_main_product(ConstantC:new(found[1]))
  end

  --- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞:
  --- cc1 –∏ cc2 ‚Äî –∫–æ–Ω—Å—Ç–∞–Ω—Ç-–∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä—ã, dc ‚Äî —Ä–µ—à–∞—é—â–∏–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä
  --- @param cc1 any ‚Äî –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç-–∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä
  --- @param dc  any ‚Äî —Ä–µ—à–∞—é—â–∏–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä
  --- @param cc2 any ‚Äî –≤—Ç–æ—Ä–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç-–∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä
  local function process_three_combinators(cc1, dc, cc2)
    -- 1) –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è cc1 –∏ cc2
    local max_amounts = get_max_ingredient_amounts(usefull_recipes)

    -- for name, amount in pairs(max_amounts) do
    --   local new_amount_slots = math.ceil((amount * 2 + 20) / get_stack_size(name))
    --   max_amounts[name] = new_amount_slots
    -- end

    local signals = {}
    for name, amount in pairs(max_amounts) do
      table.insert(signals, { name = name, value = amount })
    end
    local unique_signals, shifts = uniquify_signal_values(signals)

    -- –°–µ–∫—Ü–∏—è 1: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ cc1
    local section1 = cc1:add_section("")
    local entries1 = {}
    for _, sig in ipairs(unique_signals) do
      table.insert(entries1, {
        name    = sig.name,
        type    = get_type(sig.name),
        quality = qualities[1],
        min     = sig.value
      })
    end
    section1:add_signals(entries1)
    cc1:set_all_signals()

    -- 2) –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ dc —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
    for recipe_name, recipe in pairs(global_recipe_table.usefull_recipes) do
      local cond_recipe = {
        first_signal = { name = recipe_name, type = "recipe" },
        comparator   = ">",
        constant     = 0
      }
      for _, ing in ipairs(recipe.ingredients or {}) do
        local cond_ing = {
          first_signal  = { name = "signal-each", type = "virtual" },
          second_signal = { name = ing.name, type = ing.type },
          comparator    = "="
        }
        dc:add_expr(AND(cond_ing, cond_recipe))
      end
    end
    dc:apply_settings()

    -- 3) –°–µ–∫—Ü–∏—è 2: —Å–¥–≤–∏–≥–∏ –≤ cc2 (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Å–º–µ—â–µ–Ω–∏–µ)
    local section2 = cc2:add_section("")
    local entries2 = {}
    for name, shift in pairs(shifts) do
      table.insert(entries2, {
        name    = name,
        type    = get_type(name),
        quality = qualities[1],
        min     = -shift
      })
    end
    section2:add_signals(entries2)
    cc2:set_all_signals()
  end

  local cc1_found = findSpecialEntity("<combinator_1>", { name = { "constant-combinator" } })
  local dc_found  = findSpecialEntity("<combinator_2>", { name = { "decider-combinator" } })
  local cc2_found = findSpecialEntity("<combinator_3>", { name = { "constant-combinator" } })
  if #cc1_found > 0 and #dc_found > 0 and #cc2_found > 0 then
    local cc1 = ConstantC:new(cc1_found[1])
    local dc  = DeciderC:new(dc_found[1])
    local cc2 = ConstantC:new(cc2_found[1])
    process_three_combinators(cc1, dc, cc2)
  end

  -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Decider Combinator <multi_energy>
  -- @param dc DeciderC ‚Äî –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è LuaEntity
  local function process_multi_energy(dc)
    for recipe_name, recipe in pairs(usefull_recipes) do
      local cond_energy = {
        first_signal          = { name = "signal-each", type = "virtual", quality = qualities[1] },
        comparator            = "=",
        constant              = (get_total_ingredients_count(recipe) > 500) and 1 or math.ceil(1 / recipe.energy * 10),
        first_signal_networks = { red = true, green = false }
      }
      local cond_exist = {
        first_signal          = { name = recipe_name, type = "recipe", quality = qualities[1] },
        comparator            = ">",
        constant              = 0,
        first_signal_networks = { red = false, green = true }
      }
      dc:add_expr(AND(cond_energy, cond_exist))
    end

    dc:apply_settings({
      {
        signal   = { name = "signal-M", type = "virtual" },
        networks = { red = true, green = false }
      }
    })
  end

  -- –ü–æ–∏—Å–∫ –∏ –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  local found = findSpecialEntity("<multi_energy>", { name = { "decider-combinator" } })
  if #found > 0 then
    process_multi_energy(DeciderC:new(found[1]))
  end

  -- –ó–∞–ø–æ–ª–Ω—è–µ—Ç Constant Combinator —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ (—Å–æ–∑–¥–∞–Ω–æ –ø–æ –∑–∞–∫–∞–∑—É Denisk)
  -- –†–µ–π—Ç–∏–Ω–≥ = —Å–ª–æ—Ç—ã - –∫–æ–ª-–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö item-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
  local function process_load_rating_for_each_recipe(cc)
    local rating_list = {} -- { { name = "recipe-name", rating = N }, ... }

    for recipe_name, recipe in pairs(usefull_recipes) do
      local slot_count = calculate_ingredient_slot_usage(recipe, 2, 20)

      -- –ü–æ–¥—Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö item-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
      local unique_items = {}
      if recipe.ingredients then
        for _, ing in ipairs(recipe.ingredients) do
          if ing.type == "item" then
            unique_items[ing.name] = true
          end
        end
      end
      local item_types_count = 0
      for _ in pairs(unique_items) do
        item_types_count = item_types_count + 1
      end

      -- –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
      local adjusted_rating = slot_count - item_types_count * 0
      table.insert(rating_list, { name = recipe_name, rating = adjusted_rating })
    end

    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞
    table.sort(rating_list, function(a, b)
      return a.rating < b.rating
    end)

    -- –°–æ–∑–¥–∞—ë–º —Å–µ–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    local section = cc:add_section("")
    for _, entry in ipairs(rating_list) do
      section:add_signals({
        {
          name    = entry.name,
          quality = qualities[1],
          -- type    = "recipe",
          min     = entry.rating
        }
      })
    end

    cc:set_all_signals()
  end

  local found = findSpecialEntity("<load_rating_for_each_recipe>", { name = { "constant-combinator" } })
  if #found > 0 then
    process_load_rating_for_each_recipe(ConstantC:new(found[1]))
  end

  --#region ‚ñº‚ñº –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

  --- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä <max_ingredient_amounts> (—Å–æ–∑–¥–∞–Ω–æ –ø–æ –∑–∞–∫–∞–∑—É Denisk)
  --- –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ usefull_recipes
  local function process_max_ingredient_amounts(cc)
    local max_amounts = get_max_ingredient_amounts(usefull_recipes)

    -- for name, amount in pairs(max_amounts) do
    --   local new_amount_slots = math.ceil((amount * 2 + 20) / get_stack_size(name))
    --   max_amounts[name] = new_amount_slots
    -- end

    local section = cc:add_section("")

    for name, amount in pairs(max_amounts) do
      section:add_signals({
        {
          name    = name,
          type    = get_type(name),
          quality = qualities[1],
          min     = amount
        }
      })
    end

    cc:set_all_signals()
  end

  -- –ü–æ–∏—Å–∫ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞ –ø–æ –º–µ—Ç–∫–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  local found = findSpecialEntity("<max_ingredient_amounts>", { name = { "constant-combinator" } })
  if #found > 0 then
    process_max_ingredient_amounts(ConstantC:new(found[1]))
  end

  --#endregion ‚ñ≤‚ñ≤ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

  --- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä —Å –º–µ—Ç–∫–æ–π <max_ingredient_slots> (—Å–æ–∑–¥–∞–Ω–æ –ø–æ –∑–∞–∫–∞–∑—É Denisk)
  --- –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –±—ã –∑–∞–Ω—è–ª–∏ max-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
  ---@param cc any
  local function process_max_ingredient_slots(cc)
    -- –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–∏–¥–∞ { [item_name] = max_amount }
    local max_amounts = get_max_ingredient_amounts(usefull_recipes)

    -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –∂–∏–¥–∫–æ—Å—Ç–∏)
    local transformed = {} ---@type { name: string, slots: integer }[]
    for name, amount in pairs(max_amounts) do
      if get_type(name) == "item" then
        local stack_size = get_stack_size(name)
        local adjusted = amount * 2 + math.min(stack_size, 20)
        local slots = math.ceil(adjusted / stack_size)
        table.insert(transformed, { name = name, slots = slots })
      end
    end

    -- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ—Ç–æ–≤
    table.sort(transformed, function(a, b)
      return a.slots < b.slots
    end)

    -- –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä
    local section = cc:add_section("")
    for _, entry in ipairs(transformed) do
      section:add_signals({
        {
          name    = entry.name,
          quality = qualities[1],
          min     = entry.slots
        }
      })
    end

    cc:set_all_signals()
  end

  local found = findSpecialEntity("<max_ingredient_slots>", { name = { "constant-combinator" } })
  if #found > 0 then
    process_max_ingredient_slots(ConstantC:new(found[1]))
  end

  --#endregion ‚ñ≤ DeciderCombinator + ConstantCombinator —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ


  --#region ‚ñº –¢–µ—Å—Ç 13 - —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ "any" (<test_any_comp_storage>)

  do
    local found = findSpecialEntity("<test_any_comp_storage>", { name = { "requester-chest" } })
    if #found > 0 then
      -- —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π RequestC –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ–∫—Ü–∏–π
      local request = RequestC:new(found[1])
      -- —Å–æ–∑–¥–∞—ë–º —Å–µ–∫—Ü–∏—é —Å –º–µ—Ç–∫–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ any
      local section = request:add_section("<test_any_comp_storage>")
      -- –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–º "any"
      section:add_signal { name = "iron-plate", type = "item", comparator = ">", quality = qualities[1], min = 0 }
      section:add_signal { name = "copper-plate", type = "item", comparator = "any", min = 0 }
      -- –ø—Ä–∏–º–µ–Ω—è–µ–º –≤ —Å—É–Ω–¥—É–∫
      request:apply()
    end
  end
  --#endregion ‚ñ≤ –¢–µ—Å—Ç 13

  --#region ‚ñº‚ñº –¢–µ—Å—Ç ? - –°—Ü–µ–Ω–∞—Ä–∏–π 4 —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Chest ‚Üí SectionRC ‚Üí RequestC

  -- do
  --   -- 1. –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏ –ø–æ –º–µ—Ç–∫–∞–º
  --   local found1 = findSpecialEntity("<chest1>", { name = { "requester-chest" } })
  --   local found2 = findSpecialEntity("<chest2>", { name = { "requester-chest" } })
  --   if #found1 == 0 or #found2 == 0 then
  --     game.print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Å—É–Ω–¥—É–∫–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è 4")
  --     return
  --   end

  --   -- 2. –°–æ–∑–¥–∞—ë–º —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  --   local chest1 = Chest:new(found1[1])
  --   local chest2 = Chest:new(found2[1])

  --   -- 3. –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ 10 —à—Ç—É–∫ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –æ–±–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
  --   local anySucceeded
  --   repeat
  --     anySucceeded = false
  --     for name in pairs(global_resource_table.all_items) do
  --       local rem1 = chest1:add(name, 10)
  --       local rem2 = chest2:add(name, 10)
  --       if rem1 < 10 or rem2 < 10 then
  --         anySucceeded = true
  --       end
  --     end
  --   until not anySucceeded

  --   -- 4. –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ä–µ–∞–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫ —á–µ—Ä–µ–∑ RequestC/SectionRC

  --   -- 4.1 –ü–µ—Ä–≤—ã–π —Å—É–Ω–¥—É–∫
  --   local req1     = RequestC:new(found1[1], false)
  --   local section1 = req1:add_section("<chest1_signals>")
  --   for name, _ in pairs(global_resource_table.all_items) do
  --     local full    = chest1.filled[name] or 0
  --     local partial = chest1.partial[name] or 0
  --     local S       = chest1.stack_size[name] or prototypes.item[name].stack_size
  --     local total   = full * S + partial
  --     section1:add_signal {
  --       name = name,
  --       type = "item",
  --       min  = total
  --     }
  --   end
  --   req1:apply()

  --   -- 4.2 –í—Ç–æ—Ä–æ–π —Å—É–Ω–¥—É–∫
  --   local req2     = RequestC:new(found2[1], false)
  --   local section2 = req2:add_section("<chest2_signals>")
  --   for name, _ in pairs(global_resource_table.all_items) do
  --     local full    = chest2.filled[name] or 0
  --     local partial = chest2.partial[name] or 0
  --     local S       = chest2.stack_size[name] or prototypes.item[name].stack_size
  --     local total   = full * S + partial
  --     section2:add_signal {
  --       name = name,
  --       type = "item",
  --       min  = total
  --     }
  --   end
  --   req2:apply()

  --   game.print("–°—Ü–µ–Ω–∞—Ä–∏–π 4: —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Chest –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏")
  -- end

  --#endregion ‚ñ≤‚ñ≤ –¢–µ—Å—Ç ?

  game.print("Hi, i'm script!")
end

-- return main
main()
